Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 1
prwrite1.ASM



      1					 ;*******************************************************************************
      2					 ;prwrite1.asm
      3					 ; this	call writes only one sector to floppy disk
      4					 ;   from the location 8400h
      5					 ;*******************************************************************************
      6					 PUBLIC		 aoaminiw1
      7					 EXTRN		 BxPointer1,LoaderSize1m, StartLogicalSecNum1m
      8
      9					 INCLUDE	 386SCD.INC
1    10
1    11					 .386P
1    12					 ;----------------------------------------------------------------------------
1    13					 ;application structure	for aoa
1    14
1    15	00000000			 typeApplication struc
1    16	00000000  01*(????)			 noOfSectors	 DW	 ?
1    17	00000002  01*(????)			 startingSector	 DW	 ?
1    18	00000004  01*(08*(??))			 nameApplication DB	 8 dup(?)
1    19	0000000C			 typeApplication ends
1    20
1    21
1    22					 ;allApplications	 typeApplication 10 dup(<>)
1    23					 ; ten application vector
1    24
1    25
1    26					 ; command structure
1    27	00000000			 typeCommand		 struc
1    28	00000000  01*(??)			 command	 db	 ?	 ; command
1    29										 ; 0 - exit
1    30										 ; 1 - no command
1    31										 ; 2 - load
1    32										 ; 3 - run
1    33	00000001  01*(08*(??))			 appName	 db	 8 dup(?)
1    34
1    35	00000009  01*(??)			 appIndex	 db	 ?
1    36
1    37	0000000A			 typeCommand		 ends
1    38
1    39					 ;appCommand	 typeCommand <>
1    40					 ;----------------------------------------------------------------------------
1    41					 ; Setup keyboard LED according	to variable NumLock & CapLock
1    42					 ;----------------------------------------------------------------------------
1    43					 KeyboardLED	 MACRO	 NumLock, CapLock	 ; setup keyboard LED
1    44							 LOCAL @@NoCap,@@Write_LED,@@Wait1,@@Wait2,@@Wait3
1    45
1    46							 mov bl, 0
1    47							 mov al, CapLock
1    48							 cmp al, 0
1    49							 jz @@NoCap
1    50							 or bl,	4
1    51					 @@NoCap:
1    52							 mov al, NumLock
1    53							 cmp al, 0
1    54							 jz @@Write_LED
1    55							 or bl,	2
1    56					 @@Write_LED:
1    57							 mov dx, 64h	 ; set CapLock LED
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 2
prwrite1.ASM



1    58					 @@Wait1:
1    59							 in al,	dx
1    60							 and al, 2
1    61							 jnz @@Wait1
1    62
1    63							 mov dx, 60h	 ; write LED command
1    64							 mov al, 0edh
1    65							 out dx, al
1    66
1    67							 mov dx, 64h
1    68					 @@Wait2:
1    69							 in al,	dx
1    70							 and al, 2
1    71							 jnz @@Wait2
1    72
1    73							 mov dx, 60h
1    74							 mov al, bl
1    75							 out dx, al
1    76
1    77							 mov dx, 64h
1    78					 @@Wait3:
1    79							 in al,	dx
1    80							 and al, 2
1    81							 jnz @@Wait3
1    82
1    83							 ENDM
1    84					 ;----------------------------------------------------------------------------
1    85					 ; Write configuration data to FDC
1    86					 ;----------------------------------------------------------------------------
1    87					 FDC_out	 MACRO
1    88							 local @@loop
1    89							 push	 edx
1    90							 push	 eax
1    91
1    92							 mov	 dx, 3f4h
1    93					 @@loop:
1    94							 in	 al, dx
1    95							 test	 al, 80h
1    96							 jz	 @@loop
1    97
1    98							 inc	 dx
1    99							 pop	 eax
1   100							 out	 dx, al
1   101
1   102							 pop	 edx
1   103							 ENDM
1   104					 ;----------------------------------------------------------------------------
1   105					 ; Read	a byte from FDC
1   106					 ; Return data is in AL
1   107					 ;----------------------------------------------------------------------------
1   108					 FDC_in		 MACRO
1   109							 local @@loop
1   110							 push	 edx
1   111
1   112							 mov	 dx, 3f4h
1   113					 @@loop:
1   114							 in	 al, dx
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 3
prwrite1.ASM



1   115							 test	 al, 80h
1   116							 jz	 @@loop
1   117
1   118							 inc	 dx
1   119							 in	 al, dx
1   120
1   121							 pop	 edx
1   122							 ENDM
1   123					 ;----------------------------------------------------------------------------
1   124					 ; Debug purpose
1   125					 ;----------------------------------------------------------------------------
1   126					 FDC_al		 MACRO	 ps
1   127							 push	 ebx
1   128							 mov	 ebx, ps
1   129							 int	 0fdh
1   130							 pop	 ebx
1   131							 ENDM
1   132					 ;----------------------------------------------------------------------------
1   133					 ; Wait	for floppy interrupt
1   134					 ;----------------------------------------------------------------------------
1   135					 FDC_wait	 MACRO
1   136							 local @@loop
1   137							 push	 eax
1   138							 push	 fs
1   139
1   140							 mov	 ax, RData_Sel
1   141							 mov	 fs, ax
1   142
1   143					 @@loop:
1   144							 mov	 al, fs:[FloppyReady]
1   145							 cmp	 al, 0
1   146							 jz	 @@loop
1   147							 mov	 al, 0
1   148							 mov	 fs:[FloppyReady], al
1   149
1   150							 pop	 fs
1   151							 pop	 eax
1   152							 ENDM
1   153					 ;----------------------------------------------------------------------------
1   154					 ; Delay a while to wait for other stuff
1   155					 ;----------------------------------------------------------------------------
1   156					 MDelay		 MACRO length
1   157							 local @@loop
1   158							 push	 eax
1   159							 push	 ecx
1   160
1   161							 mov	 ecx, length
1   162					 @@loop:
1   163							 xor	 ax, ax
1   164							 loop @@loop
1   165
1   166							 pop	 ecx
1   167							 pop	 eax
1   168							 ENDM
1   169					 ;----------------------------------------------------------------------------
1   170					 ; Calculate floppy start sector
1   171					 ; Return in AL
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 4
prwrite1.ASM



1   172					 ;----------------------------------------------------------------------------
1   173					 FDCSector	 MACRO	 sec
1   174							 push	 ebx
1   175							 push	 ecx
1   176
1   177							 mov	 ax, sec
1   178							 mov	 bl, 18
1   179							 div	 bl
1   180							 xor	 cx, cx
1   181							 mov	 cl, ah
1   182							 add	 cl, 1
1   183							 xor	 eax, eax
1   184							 mov	 al, cl
1   185
1   186							 pop	 ecx
1   187							 pop	 ebx
1   188							 ENDM
1   189					 ;----------------------------------------------------------------------------
1   190					 ; Calculate floppy Head
1   191					 ; Return in AL
1   192					 ;----------------------------------------------------------------------------
1   193					 FDCHead MACRO	 sec
1   194							 push	 ebx
1   195
1   196							 xor	 eax, eax
1   197							 mov	 ax, sec
1   198							 mov	 bl, 18
1   199							 div	 bl
1   200							 and	 ah, 0
1   201							 mov	 bl, 2
1   202							 div	 bl
1   203							 mov	 al, ah
1   204							 mov	 ah, 0
1   205
1   206							 pop	 ebx
1   207							 ENDM
1   208					 ;----------------------------------------------------------------------------
1   209					 ; Calculate floppy cylinder
1   210					 ; Return in AL
1   211					 ;----------------------------------------------------------------------------
1   212					 FDCCyl	 MACRO	 sec
1   213							 push	 ebx
1   214
1   215							 xor	 eax, eax
1   216							 mov	 ax, sec
1   217							 mov	 bl, 36
1   218							 div	 bl
1   219							 mov	 ah, 0
1   220
1   221							 pop	 ebx
1   222							 ENDM
1   223					 ;----------------------------------------------------------------------------
1   224					 NewLineM	 MACRO		 ;prints a newline after puthex
1   225							 push	 eax
1   226							 mov	 al,0dh
1   227							 mov	 ah,14
1   228							 int	 10h
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 5
prwrite1.ASM



1   229							 mov	 al,0ah
1   230							 mov	 ah,14
1   231							 int	 10h
1   232							 pop	 eax
1   233							 ENDM
1   234
1   235					 ;----------------------------------------------------------------------------
1   236					 ;----------------------------------------------------------------------------
1   237					 EnableA20	 MACRO
1   238							 push	 ax
1   239							 in	 al,92h
1   240							 or	 al,00000010b
1   241							 out	 92h,al
1   242							 pop	 ax
1   243							 ENDM
1   244					 ;----------------------------------------------------------------------------
1   245
1   246					 ;----------------------------------------------------------------------------
1   247					 DisableA20	 MACRO
1   248							 push	 ax
1   249							 in	 al,92h
1   250							 and	 al,11111101b
1   251							 out	 92h,al
1   252							 pop	 ax
1   253							 ENDM
1   254					 ;----------------------------------------------------------------------------
1   255
1   256					 ;----------------------------------------------------------------------------
1   257					 JUMP16		 MACRO	 Selector,Offset
1   258							 DB	 0eah
1   259							 DW	 Offset
1   260							 DW	 Selector
1   261							 ENDM
1   262					 ;----------------------------------------------------------------------------
1   263
1   264					 JUMP32		 MACRO	 Selector,Offset
1   265							 DB	 0eah
1   266							 DW	 OFFSET
1   267							 DW	 0
1   268							 DW	 Selector
1   269							 ENDM
1   270					 ;----------------------------------------------------------------------------
1   271
1   272					 ;----------------------------------------------------------------------------
1   273					 CALL16		 MACRO	 Selector,Offset
1   274							 DB	 9ah
1   275							 DW	 Offset
1   276							 DW	 Selector
1   277							 ENDM
1   278					 ;----------------------------------------------------------------------------
1   279
1   280					 CALL32		 MACRO	 Selector,Offset
1   281							 DB	 9ah
1   282							 DW	 Offset
1   283							 DW	 0
1   284							 DW	 Selector
1   285							 ENDM
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 6
prwrite1.ASM



1   286					 ;----------------------------------------------------------------------------
1   287	00000000			 Desc		 STRUC
1   288	00000000  01*(0000)		 LimitL		 DW	 0
1   289	00000002  01*(0000)		 BaseL		 DW	 0
1   290	00000004  01*(00)		 BaseM		 DB	 0
1   291	00000005  01*(00)		 Attributes	 DB	 0
1   292	00000006  01*(00)		 LimitH		 DB	 0
1   293	00000007  01*(00)		 BaseH		 DB	 0
1   294	00000008			 Desc		 ENDS
1   295					 ;----------------------------------------------------------------------------
1   296
1   297					 ;----------------------------------------------------------------------------
1   298	00000000			 Gate		 STRUC
1   299	00000000  01*(0000)		 OffsetL	 DW	 0
1   300	00000002  01*(0000)		 Selector	 DW	 0
1   301	00000004  01*(00)		 DCount		 DB	 0
1   302	00000005  01*(00)		 GType		 DB	 0
1   303	00000006  01*(0000)		 OffsetH	 DW	 0
1   304	00000008			 Gate		 ENDS
1   305					 ;----------------------------------------------------------------------------
1   306
1   307					 ;----------------------------------------------------------------------------
1   308	00000000			 PDesc		 STRUC
1   309	00000000  01*(0000)		 Limit		 DW	 0
1   310	00000002  01*(00000000)		 Base		 DD	 0
1   311	00000006			 PDesc		 ENDS
1   312					 ;----------------------------------------------------------------------------
1   313
1   314					 ;----------------------------------------------------------------------------
1   315	00000000			 TSS		 STRUC
1   316	00000000  01*(0000)		 TRLink		 DW	 0
1   317	00000002  01*(0000)				 DW	 0
1   318	00000004  01*(00000000)		 TRESP0		 DD	 0
1   319	00000008  01*(0000)		 TRSS0		 DW	 0
1   320	0000000A  01*(0000)				 DW	 0
1   321	0000000C  01*(00000000)		 TRESP1		 DD	 0
1   322	00000010  01*(0000)		 TRSS1		 DW	 0
1   323	00000012  01*(0000)				 DW	 0
1   324	00000014  01*(00000000)		 TRESP2		 DD	 0
1   325	00000018  01*(0000)		 TRSS2		 DW	 0
1   326	0000001A  01*(0000)				 DW	 0
1   327	0000001C  01*(00000000)		 TRCR3		 DD	 0
1   328	00000020  01*(00000000)		 TREIP		 DD	 0	;EIP
1   329	00000024  01*(00000000)		 TREFlag	 DD	 0	;EFLAGS
1   330	00000028  01*(00000000)		 TREAX		 DD	 0	;EAX
1   331	0000002C  01*(00000000)		 TRECX		 DD	 0	;ECX
1   332	00000030  01*(00000000)		 TREDX		 DD	 0	;EDX
1   333	00000034  01*(00000000)		 TREBX		 DD	 0	;EBX
1   334	00000038  01*(00000000)		 TRESP		 DD	 0	;ESP
1   335	0000003C  01*(00000000)		 TREBP		 DD	 0	;EBP
1   336	00000040  01*(00000000)		 TRESI		 DD	 0	;ESI
1   337	00000044  01*(00000000)		 TREDI		 DD	 0	;EDI
1   338	00000048  01*(0000)		 TRES		 DW	 0	;ES
1   339	0000004A  01*(0000)				 DW	 0
1   340	0000004C  01*(0000)		 TRCS		 DW	 0
1   341	0000004E  01*(0000)				 DW	 0
1   342	00000050  01*(0000)		 TRSS		 DW	 0	;SS
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 7
prwrite1.ASM



1   343	00000052  01*(0000)				 DW	 0
1   344	00000054  01*(0000)		 TRDS		 DW	 0	;DS
1   345	00000056  01*(0000)				 DW	 0
1   346	00000058  01*(0000)		 TRFS		 DW	 0	;FS
1   347	0000005A  01*(0000)				 DW	 0
1   348	0000005C  01*(0000)		 TRGS		 DW	 0	;GS
1   349	0000005E  01*(0000)				 DW	 0
1   350	00000060  01*(0000)		 TRLDTR		 DW	 0
1   351	00000062  01*(0000)				 DW	 0
1   352	00000064  01*(0000)		 TRTrip		 DW	 0
1   353	00000066  01*(0068)		 TRIOMap	 DW	 $+2
1   354	00000068			 TSS		 ENDS
1   355					 ;----------------------------------------------------------------------------
1   356
1   357					 ;----------------------------------------------------------------------------
1   358		  = 0090		 ATDR		 EQU	 90h
1   359		  = 0092		 ATDW		 EQU	 92h
1   360		  = 0093		 ATDWA		 EQU	 93h
1   361		  = 0096		 ATSWA		 EQU	 96h
1   362		  = 0098		 ATCE		 EQU	 98h
1   363		  = 009A		 ATCER		 EQU	 9ah
1   364		  = 009C		 ATCCO		 EQU	 9ch
1   365		  = 009E		 ATCCOR		 EQU	 9eh
1   366					 ;----------------------------------------------------------------------------
1   367
1   368					 ;----------------------------------------------------------------------------
1   369		  = 0082		 ATLDT		 EQU	 82h
1   370		  = 0085		 ATTaskGate	 EQU	 85h
1   371		  = 0089		 AT386TSS	 EQU	 89h
1   372		  = 008C		 AT386CGate	 EQU	 8ch
1   373		  = 008E		 AT386IGate	 EQU	 8eh
1   374		  = 008F		 AT386TGate	 EQU	 8fh
1   375					 ;----------------------------------------------------------------------------
1   376
1   377					 ;----------------------------------------------------------------------------
1   378		  = 0000		 DPL0		 EQU	 00h ;DPL=0
1   379		  = 0020		 DPL1		 EQU	 20h ;DPL=1
1   380		  = 0040		 DPL2		 EQU	 40h ;DPL=2
1   381		  = 0060		 DPL3		 EQU	 60h ;DPL=3
1   382					 ;----------------------------------------------------------------------------
1   383
1   384					 ;----------------------------------------------------------------------------
1   385		  = 0000		 RPL0		 EQU	 00h ;RPL=0
1   386		  = 0001		 RPL1		 EQU	 01h ;RPL=1
1   387		  = 0002		 RPL2		 EQU	 02h ;RPL=2
1   388		  = 0003		 RPL3		 EQU	 03h ;RPL=3
1   389					 ;----------------------------------------------------------------------------
1   390
1   391					 ;----------------------------------------------------------------------------
1   392		  = 0000		 IOPL0		 EQU	 0000h ;IOPL=0
1   393		  = 1000		 IOPL1		 EQU	 1000h ;IOPL=1
1   394		  = 2000		 IOPL2		 EQU	 2000h ;IOPL=2
1   395		  = 3000		 IOPL3		 EQU	 3000h ;IOPL=3
1   396					 ;----------------------------------------------------------------------------
1   397
1   398					 ;----------------------------------------------------------------------------
1   399		  = 0040		 D32		 EQU	 40h
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 8
prwrite1.ASM



1   400		  = 0080		 GL		 EQU	 80h
1   401		  = 0004		 TIL		 EQU	 04h
1   402		  = 00020000		 VMFL		 EQU	 00020000h ;VMF=1
1   403		  = 0002		 VMFLW		 EQU	 0002h
1   404		  = 0200		 IFL		 EQU	 00000200h ;IF=1
1   405		  = 00010000		 RFL		 EQU	 00010000h ;
1   406		  = 0001		 RFLW		 EQU	 0001h
1   407		  = 4000		 NTL		 EQU	 00004000h ;NT=1
1   408					 ;----------------------------------------------------------------------------
1   409
1   410					 ;----------------------------------------------------------------------------
1   411		  = 0001		 PL		 EQU	 1
1   412		  = 0000		 RWR		 EQU	 0
1   413		  = 0002		 RWW		 EQU	 2
1   414		  = 0000		 USS		 EQU	 0
1   415		  = 0004		 USU		 EQU	 4
1   416					 ;----------------------------------------------------------------------------
1   417		  = 0064		 HZ		 EQU	 100
1   418		  = 001234DC		 CLOCK_TICK_RATE EQU	 1193180
1   419		  = 2E9C		 LATCH		 EQU	 ((CLOCK_TICK_RATE+HZ/2)/HZ)
1   420					 ;----------------------------------------------------------------------------
1   421
    422					 INCLUDE	 DCYCLE.INC
1   423					 EXTRN		 PUTHEX32R:NEAR
1   424					 EXTRN		 WriteString:NEAR
1   425					 EXTRN		 ClearScreen:NEAR
1   426					 EXTRN		 GETKEYFORMENU:NEAR
1   427					 EXTRN		 NEWLINE:NEAR
1   428					 EXTRN		 GET_PARAMETER:NEAR
1   429					 EXTRN		 ResetPointer:NEAR
1   430					 EXTRN		 PRINTMEMR:NEAR
1   431
1   432
    433
    434					 ;*******************************************************************************
    435	    0000			 RDataSeg	 SEGMENT PARA public USE16 'REALDATA'
    436
    437
    438	    0000  00			 DiskDrive2		 db	 0h	 ;initialize the number	of disk	drive (floppy/hard).
    439										 ;later	we can get this	number from
    440										 ;keyboard!!!!!!!!!!!!!!!!!!!!!!!!!!!
    441
    442	    0001  00000003		 LoopCount2		 dd	 3	 ;try three times
    443
    444	    0005  00			 SS_cl2			 db	 0	 ;Start	sector number in cl
    445	    0006  00			 T_ch2			 db	 0	 ;track	in ch
    446	    0007  00			 H_dh2			 db	 0	 ;head in dh
    447
    448	    0008			 RDataSeg	 Ends
    449
    450					 ;*******************************************************************************
    451
    452	    0000			 RCodeSeg	 SEGMENT PARA public USE16 'CODE'
    453							 ASSUME	 DS:RDataSeg, CS:RCodeSeg
    454					 ;===============================================================================
    455	    0000			 aoaminiw1	  proc
    456
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 9
prwrite1.ASM



    457	    0000  FB				 sti
    458	    0001  B8 0840			 mov	 ax,0840h		 ;set up es for	the es:bx reader buffer.
    459	    0004  8E C0				 mov	 es,ax
    460	    0006  66| BB 00000000		 mov	 ebx, 0
    461
    462	    000C			 WStart2:
    463
    464	    000C  E8 004D			 call	 StartSec_cl2		 ;use current StartLogicalSecNum1m to get
    465										 ;current StartPhysicalSecNum.
    466
    467	    000F  E8 005D			 call	 Head_dh2		 ;use current StartLogicalSecNum1m to get
    468										 ;current head number.
    469
    470	    0012  E8 006F			 call	 Track_ch2		 ;use current StartLogicalSecNum1m to get
    471										 ;current track	number.
    472	    0015  F8				 clc
    473
    474	    0016  BB 0000			 mov	 bx, 0h		 ;set up bx for	the es:bx reader buffer.
    475
    476	    0019  8A 16	0000r			 MOV	 dl, DiskDrive2		 ;load from floppy disk.
    477	    001D  8A 36	0007r			 mov	 dh, H_dh2
    478	    0021  8A 0E	0005r			 mov	 cl, SS_cl2
    479	    0025  8A 2E	0006r			 mov	 ch, T_ch2
    480
    481
    482	    0029  B4 03				 mov	 ah, 03h		 ;write	one sector at a	time
    483	    002B  B0 01				 mov	 al, 01h
    484	    002D  CD 13				 int	 13H			 ; BIOS	call to	write
    485
    486	    002F  73 11				 jnc	 NextSector2		 ;if not carry,	go to load next	sector.
    487	    0031  66| FF 0E 0001r		 dec	 LoopCount2		 ;otherwise, try until three times.
    488	    0036  66| A1 0001r			 mov	 eax, LoopCount2
    489	    003A  66| 83 F8 00			 cmp	 eax, 0
    490	    003E  75 CC				 jnz	 WStart2
    491	    0040  EB 0A				 jmp	 @@Boot_Failure2
    492
    493	    0042			 NextSector2:
    494
    495	    0042  FF 06	0000e			 inc	 StartLogicalSecNum1m
    496	    0046  FF 0E	0000e			 dec	 LoaderSize1m
    497	    004A  EB 06				 JMP	 LoadFinish2
    498
    499	    004C			 @@Boot_Failure2:
    500
    501	    004C  B4 0E				 mov	 ah, 14
    502	    004E  B0 46				 mov	 al, 'F'
    503	    0050  CD 10				 int	 10h
    504
    505	    0052			 LoadFinish2:
    506	    0052  66| C7 06 0001r     +		 mov	 [LoopCount2],3
    507		  00000003
    508	    005B  C3				 ret
    509	    005C			 aoaminiw1 endp
    510
    511					 ;=================================================================================
    512
    513	    005C			 StartSec_cl2	 proc			 ;this proc make StartPhysicalSecNum into
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 10
prwrite1.ASM



    514										 ;cl.
    515
    516	    005C  A1 0000e			 mov	 ax, StartLogicalSecNum1m	 ;start	to calculate StartPhysicalSecNum
    517	    005F  B3 12				 mov	 bl, 18			 ;SPSN=(SLSN mod 18)+1
    518	    0061  F6 F3				 div	 bl			 ;'and cl, n-1'	to implement 'mod cl, n'
    519	    0063  33 C9				 xor	 cx, cx			 ;18-1=17
    520	    0065  8A CC				 mov	 cl, ah			 ;now we get the starting physical sector
    521	    0067  80 C1	01			 add	 cl, 1			 ;number in the	local track into cl.
    522	    006A  88 0E	0005r			 mov	 SS_cl2, cl
    523	    006E  C3				 ret
    524
    525	    006F			 StartSec_cl2	 endp
    526
    527					 ;===============================================================================
    528
    529	    006F			 Head_dh2	 proc
    530
    531										 ;calcute StartHead=(SLSN/18) mod 2
    532	    006F  A1 0000e			 mov	 ax, StartLogicalSecNum1m
    533	    0072  B3 12				 mov	 bl, 18
    534	    0074  F6 F3				 div	 bl
    535	    0076  80 E4	00			 and	 ah, 0
    536	    0079  B3 02				 mov	 bl, 2
    537	    007B  F6 F3				 div	 bl
    538	    007D  8A F4				 mov	 dh, ah
    539
    540	    007F  88 36	0007r			 mov	 H_dh2,	dh
    541	    0083  C3				 ret
    542
    543	    0084			 Head_dh2	 endp
    544
    545					 ;===============================================================================
    546
    547	    0084			 Track_ch2	 proc
    548
    549	    0084  33 C0				 xor	 ax, ax				 ;calcute StartTrack=SLSN/(18*2)
    550	    0086  A1 0000e			 mov	 ax, StartLogicalSecNum1m
    551	    0089  B3 24				 mov	 bl, 36
    552	    008B  F6 F3				 div	 bl
    553	    008D  8A E8				 mov	 ch, al
    554
    555	    008F  88 2E	0006r			 mov	 T_ch2,	ch
    556	    0093  C3				 ret
    557	    0094			 Track_ch2	 endp
    558
    559	    0094			 RCodeSeg	 ENDS
    560					 ;===============================================================================
    561							 END
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 11
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "05/19/10"
??FILENAME		Text   "prwrite1"
??TIME			Text   "12:24:50"
??VERSION		Number 0205
@@BOOT_FAILURE2		Near   RCODESEG:004C		   491	#499
@CPU			Text   0D8FH			   #11
@CURSEG			Text   RCODESEG			   #435	 #452
@FILENAME		Text   PRWRITE1
@WORDSIZE		Text   2			   #11	#435  #452
AOAMINIW1		Near   RCODESEG:0000		   6  #455
AT386CGATE		Number 008C			   #372
AT386IGATE		Number 008E			   #373
AT386TGATE		Number 008F			   #374
AT386TSS		Number 0089			   #371
ATCCO			Number 009C			   #364
ATCCOR			Number 009E			   #365
ATCE			Number 0098			   #362
ATCER			Number 009A			   #363
ATDR			Number 0090			   #358
ATDW			Number 0092			   #359
ATDWA			Number 0093			   #360
ATLDT			Number 0082			   #369
ATSWA			Number 0096			   #361
ATTASKGATE		Number 0085			   #370
BXPOINTER1		Word   ----:---- Extern		   #7
CLEARSCREEN		Near   ----:---- Extern		   #425
CLOCK_TICK_RATE		Number 001234DC			   #418	 419
D32			Number 0040			   #399
DISKDRIVE2		Byte   RDATASEG:0000		   #438	 476
DPL0			Number 0000			   #378
DPL1			Number 0020			   #379
DPL2			Number 0040			   #380
DPL3			Number 0060			   #381
GETKEYFORMENU		Near   ----:---- Extern		   #426
GET_PARAMETER		Near   ----:---- Extern		   #428
GL			Number 0080			   #400
HEAD_DH2		Near   RCODESEG:006F		   467	#529
HZ			Number 0064			   #417	 419  419
H_DH2			Byte   RDATASEG:0007		   #446	 477  540
IFL			Number 0200			   #404
IOPL0			Number 0000			   #392
IOPL1			Number 1000			   #393
IOPL2			Number 2000			   #394
IOPL3			Number 3000			   #395
LATCH			Number 2E9C			   #419
LOADERSIZE1M		Word   ----:---- Extern		   #7  496
LOADFINISH2		Near   RCODESEG:0052		   497	#505
LOOPCOUNT2		Dword  RDATASEG:0001		   #442	 487  488  506
NEWLINE			Near   ----:---- Extern		   #427
NEXTSECTOR2		Near   RCODESEG:0042		   486	#493
NTL			Number 4000			   #407
PL			Number 0001			   #411
PRINTMEMR		Near   ----:---- Extern		   #430
PUTHEX32R		Near   ----:---- Extern		   #423
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 12
Symbol Table



RESETPOINTER		Near   ----:---- Extern		   #429
RFL			Number 00010000			   #405
RFLW			Number 0001			   #406
RPL0			Number 0000			   #385
RPL1			Number 0001			   #386
RPL2			Number 0002			   #387
RPL3			Number 0003			   #388
RWR			Number 0000			   #412
RWW			Number 0002			   #413
SS_CL2			Byte   RDATASEG:0005		   #444	 478  522
STARTLOGICALSECNUM1M	Word   ----:---- Extern		   #7  495  516	 532  550
STARTSEC_CL2		Near   RCODESEG:005C		   464	#513
TIL			Number 0004			   #401
TRACK_CH2		Near   RCODESEG:0084		   470	#547
T_CH2			Byte   RDATASEG:0006		   #445	 479  555
USS			Number 0000			   #414
USU			Number 0004			   #415
VMFL			Number 00020000			   #402
VMFLW			Number 0002			   #403
WRITESTRING		Near   ----:---- Extern		   #424
WSTART2			Near   RCODESEG:000C		   #462	 490

Macro Name						   Cref	(defined at #)

CALL16							   #273
CALL32							   #280
DISABLEA20						   #247
ENABLEA20						   #237
FDCCYL							   #212
FDCHEAD							   #193
FDCSECTOR						   #173
FDC_AL							   #126
FDC_IN							   #108
FDC_OUT							   #87
FDC_WAIT						   #135
JUMP16							   #257
JUMP32							   #264
KEYBOARDLED						   #43
MDELAY							   #156
NEWLINEM						   #224

Structure Name		Type  Offset			   Cref	(defined at #)

DESC							   #287
 LIMITL			Word   0000
 BASEL			Word   0002
 BASEM			Byte   0004
 ATTRIBUTES		Byte   0005
 LIMITH			Byte   0006
 BASEH			Byte   0007
GATE							   #298
 OFFSETL		Word   0000
 SELECTOR		Word   0002
 DCOUNT			Byte   0004
 GTYPE			Byte   0005
 OFFSETH		Word   0006
PDESC							   #308
Turbo Assembler	 Version 2.5	    05/19/10 12:24:50	    Page 13
Symbol Table



 LIMIT			Word   0000
 BASE			Dword  0002
TSS							   #315
 TRLINK			Word   0000
 TRESP0			Dword  0004
 TRSS0			Word   0008
 TRESP1			Dword  000C
 TRSS1			Word   0010
 TRESP2			Dword  0014
 TRSS2			Word   0018
 TRCR3			Dword  001C
 TREIP			Dword  0020
 TREFLAG		Dword  0024
 TREAX			Dword  0028
 TRECX			Dword  002C
 TREDX			Dword  0030
 TREBX			Dword  0034
 TRESP			Dword  0038
 TREBP			Dword  003C
 TRESI			Dword  0040
 TREDI			Dword  0044
 TRES			Word   0048
 TRCS			Word   004C
 TRSS			Word   0050
 TRDS			Word   0054
 TRFS			Word   0058
 TRGS			Word   005C
 TRLDTR			Word   0060
 TRTRIP			Word   0064
 TRIOMAP		Word   0066
TYPEAPPLICATION						   #15
 NOOFSECTORS		Word   0000
 STARTINGSECTOR		Word   0002
 NAMEAPPLICATION	Byte   0004
TYPECOMMAND						   #27
 COMMAND		Byte   0000
 APPNAME		Byte   0001
 APPINDEX		Byte   0009

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

RCODESEG		16  0094 Para	Public	CODE	   #452	 453
RDATASEG		16  0008 Para	Public	REALDATA   #435	 453
