Microsoft (R) Macro Assembler Version 6.11		    04/14/06 10:26:29
rcv.asm							     Page 1 - 1



					.386p
					.387
					.model flat,c

					include ethernetinc.inc
			      C 
			      C option expr32
			      C option casemap:none
			      C 
			      C ; Begin of file ethernetinc.h
			      C ; all these values were obtained from the 3com manual 
			      C ; no need to change them 
 = 00000020		      C SizeOfDpd			EQU		00000020h
 = 00000020		      C SizeOfUpd			EQU	        00000020h
			      C 
 = 00007800		      C Command_SetIndicationEnable	EQU		00007800h
 = 00002800		      C Command_RXReset			EQU		00002800h
 = 00000800		      C Command_SelectWindow		EQU		00000800h
 = 00002000		      C Command_RXEnable		EQU		00002000h
 = 00008000		      C Command_SetRXFilter		EQU		00008000h
 = 00005800		      C Command_TXReset			EQU		00005800h
 = 00004800		      C Command_TXEnable		EQU		00004800h
 = 00005000		      C Command_TXDisable		EQU		00005000h
 = 00000080		      C Command_ReadEpromCommand	EQU		00000080h
 = 0000983C		      C Command_TxStartThresh		EQU		0000983ch 
			      C ; 60 bytes = 3ch min threshold which is length of ethernet packet
 = 00003002		      C Command_DnStall			EQU		00003002h 
 = 00003003		      C Command_DnUnStall		EQU		00003003h 
 = 00003000		      C Command_UpStall			EQU		00003000h 
 = 00003001		      C Command_UpUnStall		EQU		00003001h 
 = 0000A800		      C Command_StatsEnable		EQU		0000a800h
			      C 
			      C 
			      C 
			      C 
 = 00000110		      C ID_PORT				EQU		00000110h
 = 0000820C		      C PreambleData			EQU		0000820ch
 = 00000000		      C Command_GlobalReset		EQU		00000000h
 = 00001000		      C Command_StartIntXCVR		EQU		00001000h
 = 00001800		      C Command_RXDisable		EQU		00001800h
 = 00004000		      C Command_RXDiscard		EQU		00004000h
 = 00006000		      C Command_RequestInt		EQU		00006000h
 = 00006800		      C Command_AckInt			EQU		00006800h
 = 00007000		      C Command_SetIntMask		EQU		00007000h
			      C ;Command_SetRZMask		EQU		00007800h
 = 00008800		      C Command_SetRXEarly		EQU		00008800h
 = 00009000		      C Command_SetTXAvailable		EQU		00009000h
 = 00009800		      C Command_SetTXStart		EQU		00009800h
 = 0000B000		      C Command_StatsDisable		EQU		0000b000h
 = 0000B800		      C Command_StopCoaxTrans		EQU		0000b800h
			      C 
			      C ;Processor Speed in MHZ. This is used by Short Delay Procedure
			      C ;-------------------------------------------------------------
 = 00000163		      C Processor_Speed		EQU		355
 = 00000005		      C NoOfCycles_Delay	EQU		5	
			      C ; No of cycles used to calculate the delay loop 
			      C ;-------------------------------------------------------------
 = 000000B8		      C GlobalDataSel		EQU		000000b8h
 = 00000018		      C RDataSel		EQU		00000018h
 = 00000308		      C GKKQ			EQU		00000308h
 = 00000407		      C GKHead			EQU		00000407h
 = 00000408		      C GKTail			EQU		00000408h
 = 0000000C		      C StackSel		EQU		0000000Ch
 = 00000090		      C Puthex32DataSel 	EQU		00000090h
 = 000000C0		      C MEMDataSel         	EQU		000000C0h ; G4Data_Sel prcycle 
			      C 
			      C @proto_0		TYPEDEF		PROTO C :WORD, :PTR BYTE
			      C initasm		PROTO		@proto_0
			      C 
			      C @proto_1		TYPEDEF		PROTO C :WORD, :PTR BYTE
			      C receasm		PROTO		@proto_1
			      C 
			      C @proto_2		TYPEDEF		PROTO C :WORD, :PTR BYTE, :DWORD
			      C transasm		PROTO		@proto_2
			      C 
			      C @proto_7		typedef		proto c :word
			      C closeasm			proto		@proto_7
			      C 
			      C @proto_3		TYPEDEF		PROTO C 
			      C Wait_Command_Finish		PROTO		@proto_3
			      C 
			      C @proto_4		TYPEDEF		PROTO C 
			      C Wait_EEPROM_Unbusy		PROTO		@proto_4
			      C 
			      C @proto_5		TYPEDEF		PROTO C 
			      C Check_Window6_Transmit_Success		PROTO		@proto_5
			      C 
			      C @proto_6		TYPEDEF		PROTO C 
			      C Check_Window3_FreeTX		PROTO		@proto_6
			      C 
			      C ; End of file ethernetinc.h
			      C 

 00000000			.CODE

				;***********************************************************************
				; enable receiver 
				; enabling and disabling can also be done through a different method 
				;  where you put a 0 value or a needed value in the UpLstPtr 
				;***********************************************************************
 00000000			enableReceive 	proc c public uses edx, IOBASE:DWORD  
 00000004  52				push 	edx 

 00000005  B8 00000000		        mov eax, 0  ; will change the window to 0 
 0000000A  8B 45 08		        mov eax, IOBASE
 0000000D  66| 8B D0		 	mov dx, ax            
 00000010  66| 83 C2 0E			add dx, 0eh    
 00000014  66| B8 0800			mov ax, Command_SelectWindow + 0 
 00000018  66| EF			out dx, ax 
 0000001A  E8 00000000 E		CALL Wait_Command_Finish 

 0000001F  66| B8 2000		        mov ax, Command_RXEnable ;  enable the receiver  
 00000023  66| EF			out dx, ax 
 00000025  E8 00000000 E		CALL Wait_Command_Finish 
 0000002A  B8 00000000			mov     eax, 0

 0000002F  5A				pop	edx 
					ret
 00000033			enableReceive 	endp

				;***********************************************************************
				; disable receiver 
				;***********************************************************************
 00000033			disableReceive 	proc c public uses edx, IOBASE:DWORD  
 00000037  52				push 	edx 

 00000038  B8 00000000		        mov eax, 0  ; will change the window to 0 
 0000003D  8B 45 08		        mov eax, IOBASE
 00000040  66| 8B D0		 	mov dx, ax            
 00000043  66| 83 C2 0E			add dx, 0eh    
 00000047  66| B8 0800			mov ax, Command_SelectWindow + 0 
 0000004B  66| EF			out dx, ax 
 0000004D  E8 00000000 E		CALL Wait_Command_Finish 

 00000052  66| B8 1800		        mov ax, Command_RXDisable ; disable the receiver  
 00000056  66| EF			out dx, ax 
 00000058  E8 00000000 E		CALL Wait_Command_Finish 
 0000005D  B8 00000000			mov	eax, 0 ; return code 

 00000062  5A				pop	edx 
					ret
 00000066			disableReceive 	endp

				;***********************************************************************
				; get the current receive Ptr like InPtr in a circular list 
				;  UpListPtr from the NIC can be used to get a pktno in the data structure 
				; pktno in the UPD is retrieved and used as InPtr for the circular list 
				;***********************************************************************
 00000066			getCurrentReceivePtr 	proc c public uses edx, IOBASE:WORD  
				;	push 	ebx 
 0000006A  52				push 	edx 
				;	push 	es

 0000006B  66| 8B 45 08		        mov 	ax, IOBASE
 0000006F  66| 8B D0		 	mov 	dx, ax            
 00000072  66| 83 C2 38			add 	dx, 38h      ;UpListPtr stored in the card  
 00000076  ED				in  	eax, dx  
				;	push	eax          ; save 
				        
				;	mov 	ax, MEMDataSel ; zero selector  
				;	mov	es, ax 
				;	pop	eax
					
				;	mov	ebx, eax       ; 0251e700 or appropriate address, pktno is at 10h  
				;	add	ebx, 10h       ; InPtr is inferred by the UpListPtr by using the pktno stored in the UPD
				;	mov	eax, es:[ebx]  ; get the InPtr from the UPD or rcv ptr in number  
					; pktno in the UPD is retrieved and used as InPtr for the circular list 

				;       pop	es
 00000077  5A				pop	edx
				;	pop	ebx 
					; pass the InPtr to the caller  
					ret
 0000007B			getCurrentReceivePtr 	endp
				;***********************************************************************
				; upStall  statlls the upload  
				; can be used for concurrentcy controlling as host and NIC both access the same list
				; p.142 Command: upStall Value: 3000h
				;***********************************************************************
 0000007B			upStall 	proc c public uses edx, IOBASE:DWORD 
 0000007F  52				push 	edx 

 00000080  8B 45 08			mov 	eax, IOBASE
 00000083  66| 8B D0			mov	dx, ax 
 00000086  66| 83 C2 0E			add 	dx, 0eh
 0000008A  66| B8 3000			mov	ax, Command_UpStall
 0000008E  66| EF			out 	dx, ax
 00000090  E8 00000000 E		call	Wait_Command_Finish

 00000095  5A				pop	edx 

					ret
 00000099			upStall 	endp

				;***********************************************************************
				; upUnStall unstalls the upload 
				; so that uploading continues now 
				; p.142 Command: UpUnStall Value: 3001h
				;***********************************************************************
 00000099			upUnStall 	proc c public uses edx, IOBASE:DWORD 
 0000009D  52				push 	edx 

 0000009E  8B 45 08			mov 	eax, IOBASE
 000000A1  66| 8B D0			mov	dx, ax 
 000000A4  66| 83 C2 0E			add 	dx, 0eh
 000000A8  66| B8 3001			mov	ax, Command_UpUnStall
 000000AC  66| EF			out 	dx, ax
 000000AE  E8 00000000 E		call	Wait_Command_Finish

 000000B3  5A				pop	edx 

					ret
 000000B7			upUnStall 	endp



				end
Microsoft (R) Macro Assembler Version 6.11		    04/14/06 10:26:29
rcv.asm							     Symbols 2 - 1




Types:

                N a m e                  Size     Attr

@proto_0 . . . . . . . . . . . .	 00000004     CODE 
@proto_1 . . . . . . . . . . . .	 00000004     CODE 
@proto_2 . . . . . . . . . . . .	 00000004     CODE 
@proto_3 . . . . . . . . . . . .	 00000004     CODE 
@proto_4 . . . . . . . . . . . .	 00000004     CODE 
@proto_5 . . . . . . . . . . . .	 00000004     CODE 
@proto_6 . . . . . . . . . . . .	 00000004     CODE 
@proto_7 . . . . . . . . . . . .	 00000004     CODE 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000B7 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

Check_Window3_FreeTX . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
Check_Window6_Transmit_Success .	P Near	 00000000 FLAT	Length= 00000000 External C
Wait_Command_Finish  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
Wait_EEPROM_Unbusy . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
closeasm . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
disableReceive . . . . . . . . .	P Near	 00000033 _TEXT	Length= 00000033 Public C
  IOBASE . . . . . . . . . . . .	DWord	 bp + 00000008
enableReceive  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000033 Public C
  IOBASE . . . . . . . . . . . .	DWord	 bp + 00000008
getCurrentReceivePtr . . . . . .	P Near	 00000066 _TEXT	Length= 00000015 Public C
  IOBASE . . . . . . . . . . . .	Word	 bp + 00000008
initasm  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
receasm  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
transasm . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
upStall  . . . . . . . . . . . .	P Near	 0000007B _TEXT	Length= 0000001E Public C
  IOBASE . . . . . . . . . . . .	DWord	 bp + 00000008
upUnStall  . . . . . . . . . . .	P Near	 00000099 _TEXT	Length= 0000001E Public C
  IOBASE . . . . . . . . . . . .	DWord	 bp + 00000008


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000001h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
Command_AckInt . . . . . . . . .	Number	 00006800h   
Command_DnStall  . . . . . . . .	Number	 00003002h   
Command_DnUnStall  . . . . . . .	Number	 00003003h   
Command_GlobalReset  . . . . . .	Number	 00000000h   
Command_RXDisable  . . . . . . .	Number	 00001800h   
Command_RXDiscard  . . . . . . .	Number	 00004000h   
Command_RXEnable . . . . . . . .	Number	 00002000h   
Command_RXReset  . . . . . . . .	Number	 00002800h   
Command_ReadEpromCommand . . . .	Number	 00000080h   
Command_RequestInt . . . . . . .	Number	 00006000h   
Command_SelectWindow . . . . . .	Number	 00000800h   
Command_SetIndicationEnable  . .	Number	 00007800h   
Command_SetIntMask . . . . . . .	Number	 00007000h   
Command_SetRXEarly . . . . . . .	Number	 00008800h   
Command_SetRXFilter  . . . . . .	Number	 00008000h   
Command_SetTXAvailable . . . . .	Number	 00009000h   
Command_SetTXStart . . . . . . .	Number	 00009800h   
Command_StartIntXCVR . . . . . .	Number	 00001000h   
Command_StatsDisable . . . . . .	Number	 0000B000h   
Command_StatsEnable  . . . . . .	Number	 0000A800h   
Command_StopCoaxTrans  . . . . .	Number	 0000B800h   
Command_TXDisable  . . . . . . .	Number	 00005000h   
Command_TXEnable . . . . . . . .	Number	 00004800h   
Command_TXReset  . . . . . . . .	Number	 00005800h   
Command_TxStartThresh  . . . . .	Number	 0000983Ch   
Command_UpStall  . . . . . . . .	Number	 00003000h   
Command_UpUnStall  . . . . . . .	Number	 00003001h   
GKHead . . . . . . . . . . . . .	Number	 00000407h   
GKKQ . . . . . . . . . . . . . .	Number	 00000308h   
GKTail . . . . . . . . . . . . .	Number	 00000408h   
GlobalDataSel  . . . . . . . . .	Number	 000000B8h   
ID_PORT  . . . . . . . . . . . .	Number	 00000110h   
MEMDataSel . . . . . . . . . . .	Number	 000000C0h   
NoOfCycles_Delay . . . . . . . .	Number	 00000005h   
PreambleData . . . . . . . . . .	Number	 0000820Ch   
Processor_Speed  . . . . . . . .	Number	 00000163h   
Puthex32DataSel  . . . . . . . .	Number	 00000090h   
RDataSel . . . . . . . . . . . .	Number	 00000018h   
SizeOfDpd  . . . . . . . . . . .	Number	 00000020h   
SizeOfUpd  . . . . . . . . . . .	Number	 00000020h   
StackSel . . . . . . . . . . . .	Number	 0000000Ch   

	   0 Warnings
	   0 Errors
