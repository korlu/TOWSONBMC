/*
 * test.java
 *
 * 
 */

/**
 *
 *@autor Eric Avery,Jyotsna Vodela,Vijita Mathur,Tong Li
 *COSC 519 project

 * 
 */
import javax.swing.table.AbstractTableModel;

public class MemoryInterface extends javax.swing.JFrame implements ProcessorCallBack{
    
    /** Creates new form test */
    public MemoryInterface() {
        initComponents();
        MemManager = new MemoryManager();
        MemFrameData = new MemoryInterface.MemFrameTableModel();
        MemoryFrames.setModel(MemFrameData);
        QueuePanel.setMaximumSize(QueuePanel.size());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        QueuePanel = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        CurrentProcess = new java.awt.List();
        label3 = new java.awt.Label();
        ReadyQueue = new java.awt.List();
        label1 = new java.awt.Label();
        NewQueue = new java.awt.List();
        PauseCpu = new javax.swing.JButton();
        ShowMem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MemoryFrames = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridLayout(2, 0, 0, 10));

        setTitle("COSC 519 Memory Management Simulation");
        setState(4);
        addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                formAncestorResized(evt);
            }
        });

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        QueuePanel.setLayout(null);

        QueuePanel.setBorder(new javax.swing.border.EtchedBorder());
        QueuePanel.setMaximumSize(null);
        QueuePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QueuePanelMouseClicked(evt);
            }
        });

        label2.setText("Ready Process Queue");
        QueuePanel.add(label2);
        label2.setBounds(280, 30, 128, 20);

        QueuePanel.add(CurrentProcess);
        CurrentProcess.setBounds(500, 60, 190, 210);

        label3.setText("Current Process");
        QueuePanel.add(label3);
        label3.setBounds(550, 30, 94, 20);

        QueuePanel.add(ReadyQueue);
        ReadyQueue.setBounds(250, 60, 193, 213);

        label1.setText("New Process Queue");
        QueuePanel.add(label1);
        label1.setBounds(50, 30, 118, 20);

        QueuePanel.add(NewQueue);
        NewQueue.setBounds(10, 60, 193, 213);

        PauseCpu.setText("Pause");
        PauseCpu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseCpuActionPerformed(evt);
            }
        });

        PauseCpu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Pause_click(evt);
            }
        });

        QueuePanel.add(PauseCpu);
        PauseCpu.setBounds(720, 60, 160, 26);

        ShowMem.setText("Show Memory List");
        ShowMem.setEnabled(false);
        ShowMem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowMemActionPerformed(evt);
            }
        });

        ShowMem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ShowMem_Click(evt);
            }
        });

        QueuePanel.add(ShowMem);
        ShowMem.setBounds(720, 110, 160, 26);

        getContentPane().add(QueuePanel);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportBorder(new javax.swing.border.TitledBorder(null, "Memory Frames (4k)", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane1.setMaximumSize(null);
        MemoryFrames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        MemoryFrames.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(MemoryFrames);

        getContentPane().add(jScrollPane1);

        fileMenu.setText("File");
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);
        helpMenu.setText("Help");
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);
        menuBar.add(helpMenu);
        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents

    private void PauseCpuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseCpuActionPerformed
        if(PauseCpu.getText().compareTo("Pause") == 0)
        {
            
            Processor.Pause();
            ShowMem.setEnabled(true);
            ShowMem.update(ShowMem.getGraphics());
            PauseCpu.setText("Continue");
        }
        else
        {
            ShowMem.setEnabled(false);
            ShowMem.update(ShowMem.getGraphics());
            Processor.Wakeup();
            label3.setText("Current Process");
            PauseCpu.setText("Pause");
        }
    }//GEN-LAST:event_PauseCpuActionPerformed

    private void ShowMemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowMemActionPerformed
        
        label3.setText("Memory Dump");
        
        MemoryManager.ListNode CurrentNode = MemManager.memReq.head;
        
        CurrentProcess.clear();
        
        CurrentProcess.add("Used Frame count " + MemManager.memReq.count);
        CurrentNode = MemManager.memReq.head;
        
        
        CurrentProcess.add("Frame " + CurrentNode.frame_no + " Process Id " + CurrentNode.processid);
        
        while(CurrentNode.next != null)
        {
            CurrentNode = CurrentNode.next;
            CurrentProcess.add("Frame " + CurrentNode.frame_no + " Process Id " + CurrentNode.processid);
        }
        
        
    }//GEN-LAST:event_ShowMemActionPerformed

    private void QueuePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QueuePanelMouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_QueuePanelMouseClicked

    private void ShowMem_Click(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ShowMem_Click
        
    }//GEN-LAST:event_ShowMem_Click

    private void Pause_click(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Pause_click
        
    }//GEN-LAST:event_Pause_click

    private void formAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_formAncestorResized

    }//GEN-LAST:event_formAncestorResized
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        MemoryInterface MainForm = new MemoryInterface();
        MainForm.Processor = new ProcessController(MainForm, MainForm.MemManager);
        
        MainForm.setSize(1024,790);
        
        MainForm.show();

        MainForm.QueuePanel.update(MainForm.QueuePanel.getGraphics());
        MainForm.jScrollPane1.update(MainForm.jScrollPane1.getGraphics());
        MainForm.MemoryFrames.update(MainForm.MemoryFrames.getGraphics());
        MainForm.update(MainForm.getGraphics());
        
        
        
        MainForm.Processor.start();
    }
    
    public void NewProcessCreated(PCB PInfo) 
    {   
        NewQueue.add("Process " + String.valueOf(PInfo.ID) + " Frames required " + String.valueOf(MemManager.RequestBlock(PInfo.MemUsage)));
    }
    
    public void NewProcessReady(PCB PInfo) 
    {
        ReadyQueue.add("Process " + String.valueOf(PInfo.ID));
      
        try
        {
            NewQueue.remove("Process " + String.valueOf(PInfo.ID) + " Frames required " + String.valueOf(MemManager.RequestBlock(PInfo.MemUsage)));
        }
        catch(Exception E)
        {
        }
        
        AddProcessFrames(PInfo);
    }
    
    public void ProcessCompleted(PCB PInfo) 
    {
        RemoveProcessFrames(PInfo);
    }
    
    public void ProcessFramesMoved(PCB PInfo) 
    {
        RemoveProcessFrames(PInfo);
        AddProcessFrames(PInfo);
    }
    
    public void ProcessStarted(PCB PInfo) 
    {
        try
        {
            ReadyQueue.remove("Process " + String.valueOf(PInfo.ID));
        }
        catch(Exception E)
        {
        }
        
        CurrentProcess.clear();
        
        CurrentProcess.add("Process " + PInfo.ID);
        CurrentProcess.add("Mem usage " + PInfo.MemUsage + " bytes");
        CurrentProcess.add("Start Frame " + PInfo.StartFrame);
        CurrentProcess.add("End Frame "+ PInfo.EndFrame);
        CurrentProcess.add("Total Runtime " + PInfo.TotalRunTime);
        CurrentProcess.add("Current Runtime " + PInfo.CurrentRunTime + " ms");
    }
    
     private void AddProcessFrames(PCB PInfo)
    {
        for(int i=PInfo.StartFrame; i<=PInfo.EndFrame; i++)
        {
            int Row = i/50;
            int Col = i%50;
            
            MemFrameData.setValueAt(String.valueOf(PInfo.ID), Row, Col);
        }
    }
     
    private void RemoveProcessFrames(PCB PInfo)
    {
		MemFrameData.RemoveValues(String.valueOf(PInfo.ID));
    }
    
    class MemFrameTableModel extends AbstractTableModel 
    {
        Object[][] data = new String[20][50];

        public int getColumnCount() 
        {
            return 50;
        }
    
         public int getRowCount() 
         {
            return data.length;
        }

        public String getColumnName(int col) 
        {
            return "";
        }

        public Object getValueAt(int row, int col) 
        {
            return data[row][col];
        }

        public Class getColumnClass(int c) 
        {
            String junk = "";
            return junk.getClass();
        }
        
        public void setValueAt(Object value, int row, int col) 
        {
            if(DEBUG)
            {
                System.out.println("Seting Row " + row + " Column " + col + " = " + value);
            }
            
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }
        public void RemoveValues(String Value)
        {
            for(int i=0; i<1000; i++)
            {
                int Row = i/50;
                int Col = i%50;

                if(data[Row][Col] != null && Value.compareTo(data[Row][Col]) == 0)
                {
                    MemFrameData.setValueAt("", Row, Col);
                }
            }
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Label label3;
    private javax.swing.JMenuItem aboutMenuItem;
    private java.awt.Label label2;
    private java.awt.Label label1;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton ShowMem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton PauseCpu;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.List NewQueue;
    private javax.swing.JTable MemoryFrames;
    private java.awt.List CurrentProcess;
    private javax.swing.JPanel QueuePanel;
    private javax.swing.JMenuItem exitMenuItem;
    private java.awt.List ReadyQueue;
    private javax.swing.JMenu helpMenu;
    // End of variables declaration//GEN-END:variables

    private MemFrameTableModel MemFrameData;
    public MemoryManager MemManager;
    public ProcessController Processor;
    private boolean DEBUG = false;
}
