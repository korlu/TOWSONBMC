	TITLE	AFTP.c
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_fileNumber
PUBLIC	_nextSeq
PUBLIC	_totalFiles
PUBLIC	_IP
PUBLIC	_TPACK
PUBLIC	_LPACK
_DATA	SEGMENT
COMM	_File:BYTE:0cd140H
_DATA	ENDS
_BSS	SEGMENT
_fileNumber DD	01H DUP (?)
_nextSeq DD	01H DUP (?)
_totalFiles DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_rdFile:DWORD
_DATA	ENDS
_BSS	SEGMENT
_IP	DB	014H DUP (?)
_TPACK	DD	01H DUP (?)
_LPACK	DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	_startTime:DWORD
COMM	_endTime:DWORD
COMM	_dif:QWORD
COMM	_min:DWORD
COMM	_sec:DWORD
_DATA	ENDS
PUBLIC	__real@8@4004f000000000000000
PUBLIC	_main
PUBLIC	_Init
PUBLIC	_Protocol
PUBLIC	_Create102
PUBLIC	_Create201
EXTRN	__imp__ioctlsocket@12:NEAR
EXTRN	__imp__Sleep@4:NEAR
EXTRN	__ftol:NEAR
EXTRN	__fltused:NEAR
EXTRN	__imp__htons@4:NEAR
EXTRN	__imp__inet_addr@4:NEAR
EXTRN	__imp__inet_ntoa@4:NEAR
EXTRN	__imp__recvfrom@24:NEAR
EXTRN	_difftime:NEAR
EXTRN	_time:NEAR
EXTRN	__imp__sendto@24:NEAR
EXTRN	__imp__socket@12:NEAR
EXTRN	_strcpy:NEAR
EXTRN	_strcat:NEAR
EXTRN	__imp__WSAStartup@8:NEAR
EXTRN	__imp__WSACleanup@0:NEAR
EXTRN	__imp__WSAGetLastError@0:NEAR
EXTRN	_exit:NEAR
EXTRN	__iob:BYTE
EXTRN	_fclose:NEAR
EXTRN	_getch:NEAR
EXTRN	_fopen:NEAR
EXTRN	_fprintf:NEAR
EXTRN	_fread:NEAR
EXTRN	_fseek:NEAR
EXTRN	_printf:NEAR
EXTRN	__imp__bind@12:NEAR
EXTRN	__imp__closesocket@4:NEAR
_DATA	SEGMENT
$SG19201 DB	'..\wwwt\', 00H
	ORG $+3
$SG19222 DB	'WSAStartup failed with error %d', 0aH, 00H
	ORG $+3
$SG19226 DB	'socket() failed with error %d', 0aH, 00H
	ORG $+1
$SG19229 DB	'bind() failed with error %d', 0aH, 00H
	ORG $+3
$SG19235 DB	'A: recv() failec: error %d', 0aH, 00H
$SG19237 DB	0aH, 'Error::Client closed connection', 0aH, 00H
	ORG $+2
$SG19247 DB	'B1: recv() failec: error %d', 0aH, 00H
	ORG $+3
$SG19250 DB	0aH, 'Total Packets Sent: %ld ', 00H
	ORG $+2
$SG19252 DB	0aH, 'TransferTime %ld.%2ld', 0aH, 00H
$SG19253 DB	0aH, 'End of file Transfer, Press any key to exit....', 00H
	ORG $+3
$SG19260 DB	'send() failec: error %d', 0aH, 00H
	ORG $+3
$SG19262 DB	'rb', 00H
	ORG $+1
$SG19265 DB	0aH, 'Error:A Cannot open File: %s', 00H
	ORG $+2
$SG19267 DB	0aH, 'Error:B Cannot open File: %s', 00H
	ORG $+2
$SG19270 DB	0aH, 'Total Packets Sent: %ld ', 00H
	ORG $+2
$SG19273 DB	'send() failec: error %d', 0aH, 00H
	ORG $+3
$SG19279 DB	'Error:Could put Socket in non-Blocking mode', 00H
$SG19280 DB	'Press any key to exit..........', 00H
$SG19283 DB	'B: recv() failec: error %d', 0aH, 00H
$SG19291 DB	'Client Not ready to accept.Press any key to exit......', 00H
	ORG $+1
$SG19296 DB	'rb', 00H
	ORG $+1
$SG19299 DB	0aH, 'Error:C Cannot open File: %s', 00H
	ORG $+2
$SG19313 DB	'send() failec: error %d', 0aH, 00H
	ORG $+3
$SG19319 DB	'Error:Could put Socket in non-Blocking mode', 00H
$SG19320 DB	'Press any key to exit..........', 00H
$SG19327 DB	'Error:Could put Socket in Blocking mode', 00H
$SG19328 DB	'Press any key to exit..........', 00H
$SG19331 DB	'send() failec: error %d', 0aH, 00H
	ORG $+3
$SG19337 DB	'Error:Could put Socket in Blocking mode', 00H
$SG19338 DB	'Press any key to exit..........', 00H
$SG19342 DB	'C: recv() failec: error %d', 0aH, 00H
$SG19349 DB	0aH, 'Retransmission %d', 00H
_DATA	ENDS
;	COMDAT __real@8@4004f000000000000000
; File AFTP.c
CONST	SEGMENT
__real@8@4004f000000000000000 DQ 0404e000000000000r ; 60
CONST	ENDS
_TEXT	SEGMENT
_Buffer$ = -312
_sendBuffer$ = -1872
_interface$ = -1908
_Path$ = -416
_Path2$ = -184
_port$ = -1916
_retval$ = -1900
_fromlen$ = -1896
_i$ = -852
_statusCode$ = -1912
_Size$ = -4
_ack$ = -1904
_conv$ = -828
_seq$ = -420
_iMode$ = -824
_block$ = -1920
_socket_type$ = -1892
_local$ = -848
_from$ = -1888
_wsaData$ = -820
_listen_socket$ = -316
_msgsock$ = -832
_main	PROC NEAR
; File AFTP.c
; Line 37
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 07 00
	00		 sub	 esp, 1924		; 00000784H
  00009	57		 push	 edi
; Line 43
  0000a	c7 85 8c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _interface$[ebp], 0
; Line 44
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR $SG19201
  00019	89 85 60 fe ff
	ff		 mov	 DWORD PTR _Path$[ebp], eax
  0001f	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR $SG19201+4
  00025	89 8d 64 fe ff
	ff		 mov	 DWORD PTR _Path$[ebp+4], ecx
  0002b	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR $SG19201+8
  00031	88 95 68 fe ff
	ff		 mov	 BYTE PTR _Path$[ebp+8], dl
  00037	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0003c	33 c0		 xor	 eax, eax
  0003e	8d bd 69 fe ff
	ff		 lea	 edi, DWORD PTR _Path$[ebp+9]
  00044	f3 ab		 rep stosd
  00046	66 ab		 stosw
  00048	aa		 stosb
; Line 46
  00049	66 c7 85 84 f8
	ff ff 90 13	 mov	 WORD PTR _port$[ebp], 5008 ; 00001390H
; Line 50
  00052	c7 85 88 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _statusCode$[ebp], 0
; Line 51
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Size$[ebp], 0
; Line 55
  00063	c7 85 c8 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _iMode$[ebp], 0
; Line 57
  0006d	c7 85 9c f8 ff
	ff 02 00 00 00	 mov	 DWORD PTR _socket_type$[ebp], 2
; Line 67
  00077	e8 00 00 00 00	 call	 _Init
; Line 71
  0007c	8d 85 cc fc ff
	ff		 lea	 eax, DWORD PTR _wsaData$[ebp]
  00082	50		 push	 eax
  00083	68 02 02 00 00	 push	 514			; 00000202H
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAStartup@8
  0008e	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
  00094	83 bd 94 f8 ff
	ff 00		 cmp	 DWORD PTR _retval$[ebp], 0
  0009b	74 1f		 je	 SHORT $L19221
; Line 73
  0009d	8b 8d 94 f8 ff
	ff		 mov	 ecx, DWORD PTR _retval$[ebp]
  000a3	51		 push	 ecx
  000a4	68 00 00 00 00	 push	 OFFSET FLAT:$SG19222
  000a9	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  000ae	e8 00 00 00 00	 call	 _fprintf
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 74
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSACleanup@0
$L19221:
; Line 78
  000bc	66 c7 85 b0 fc
	ff ff 02 00	 mov	 WORD PTR _local$[ebp], 2
; Line 79
  000c5	83 bd 8c f8 ff
	ff 00		 cmp	 DWORD PTR _interface$[ebp], 0
  000cc	75 0c		 jne	 SHORT $L19484
  000ce	c7 85 7c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR -1924+[ebp], 0
  000d8	eb 13		 jmp	 SHORT $L19485
$L19484:
  000da	8b 95 8c f8 ff
	ff		 mov	 edx, DWORD PTR _interface$[ebp]
  000e0	52		 push	 edx
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4
  000e7	89 85 7c f8 ff
	ff		 mov	 DWORD PTR -1924+[ebp], eax
$L19485:
  000ed	8b 85 7c f8 ff
	ff		 mov	 eax, DWORD PTR -1924+[ebp]
  000f3	89 85 b4 fc ff
	ff		 mov	 DWORD PTR _local$[ebp+4], eax
; Line 84
  000f9	66 8b 8d 84 f8
	ff ff		 mov	 cx, WORD PTR _port$[ebp]
  00100	51		 push	 ecx
  00101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4
  00107	66 89 85 b2 fc
	ff ff		 mov	 WORD PTR _local$[ebp+2], ax
; Line 86
  0010e	6a 00		 push	 0
  00110	8b 95 9c f8 ff
	ff		 mov	 edx, DWORD PTR _socket_type$[ebp]
  00116	52		 push	 edx
  00117	6a 02		 push	 2
  00119	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__socket@12
  0011f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _listen_socket$[ebp], eax
; Line 88
  00125	83 bd c4 fe ff
	ff ff		 cmp	 DWORD PTR _listen_socket$[ebp], -1
  0012c	75 1f		 jne	 SHORT $L19225
; Line 90
  0012e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00134	50		 push	 eax
  00135	68 00 00 00 00	 push	 OFFSET FLAT:$SG19226
  0013a	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  0013f	e8 00 00 00 00	 call	 _fprintf
  00144	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 91
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSACleanup@0
$L19225:
; Line 101
  0014d	6a 10		 push	 16			; 00000010H
  0014f	8d 85 b0 fc ff
	ff		 lea	 eax, DWORD PTR _local$[ebp]
  00155	50		 push	 eax
  00156	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _listen_socket$[ebp]
  0015c	51		 push	 ecx
  0015d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12
  00163	83 f8 ff	 cmp	 eax, -1
  00166	75 1f		 jne	 SHORT $L19228
; Line 103
  00168	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0016e	50		 push	 eax
  0016f	68 00 00 00 00	 push	 OFFSET FLAT:$SG19229
  00174	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  00179	e8 00 00 00 00	 call	 _fprintf
  0017e	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 104
  00181	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSACleanup@0
$L19228:
; Line 108
  00187	ba 01 00 00 00	 mov	 edx, 1
  0018c	85 d2		 test	 edx, edx
  0018e	0f 84 19 0c 00
	00		 je	 $L19232
; Line 111
  00194	c7 85 98 f8 ff
	ff 10 00 00 00	 mov	 DWORD PTR _fromlen$[ebp], 16 ; 00000010H
; Line 112
  0019e	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _listen_socket$[ebp]
  001a4	89 85 c0 fc ff
	ff		 mov	 DWORD PTR _msgsock$[ebp], eax
; Line 117
  001aa	8d 8d 98 f8 ff
	ff		 lea	 ecx, DWORD PTR _fromlen$[ebp]
  001b0	51		 push	 ecx
  001b1	8d 95 a0 f8 ff
	ff		 lea	 edx, DWORD PTR _from$[ebp]
  001b7	52		 push	 edx
  001b8	6a 00		 push	 0
  001ba	68 80 00 00 00	 push	 128			; 00000080H
  001bf	8d 85 c8 fe ff
	ff		 lea	 eax, DWORD PTR _Buffer$[ebp]
  001c5	50		 push	 eax
  001c6	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _msgsock$[ebp]
  001cc	51		 push	 ecx
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recvfrom@24
  001d3	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 120
  001d9	8b 95 a4 f8 ff
	ff		 mov	 edx, DWORD PTR _from$[ebp+4]
  001df	52		 push	 edx
  001e0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_ntoa@4
  001e6	50		 push	 eax
  001e7	68 00 00 00 00	 push	 OFFSET FLAT:_IP
  001ec	e8 00 00 00 00	 call	 _strcpy
  001f1	83 c4 08	 add	 esp, 8
; Line 122
  001f4	83 bd 94 f8 ff
	ff ff		 cmp	 DWORD PTR _retval$[ebp], -1
  001fb	75 2b		 jne	 SHORT $L19234
; Line 124
  001fd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00203	50		 push	 eax
  00204	68 00 00 00 00	 push	 OFFSET FLAT:$SG19235
  00209	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  0020e	e8 00 00 00 00	 call	 _fprintf
  00213	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 125
  00216	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _msgsock$[ebp]
  0021c	50		 push	 eax
  0021d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
; Line 126
  00223	e9 5f ff ff ff	 jmp	 $L19228
$L19234:
; Line 129
  00228	83 bd 94 f8 ff
	ff 00		 cmp	 DWORD PTR _retval$[ebp], 0
  0022f	75 1f		 jne	 SHORT $L19236
; Line 131
  00231	68 00 00 00 00	 push	 OFFSET FLAT:$SG19237
  00236	e8 00 00 00 00	 call	 _printf
  0023b	83 c4 04	 add	 esp, 4
; Line 132
  0023e	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _msgsock$[ebp]
  00244	51		 push	 ecx
  00245	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
; Line 133
  0024b	e9 37 ff ff ff	 jmp	 $L19228
$L19236:
; Line 140
  00250	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _Buffer$[ebp]
  00256	52		 push	 edx
  00257	e8 00 00 00 00	 call	 _Protocol
  0025c	83 c4 04	 add	 esp, 4
  0025f	89 85 88 f8 ff
	ff		 mov	 DWORD PTR _statusCode$[ebp], eax
; Line 141
  00265	83 bd 88 f8 ff
	ff ff		 cmp	 DWORD PTR _statusCode$[ebp], -1
  0026c	75 05		 jne	 SHORT $L19239
; Line 143
  0026e	e9 14 ff ff ff	 jmp	 $L19228
$L19239:
; Line 145
  00273	81 bd 88 f8 ff
	ff c9 00 00 00	 cmp	 DWORD PTR _statusCode$[ebp], 201 ; 000000c9H
  0027d	0f 85 df 04 00
	00		 jne	 $L19241
$EndTransfer$19242:
; Line 148
  00283	a1 00 00 00 00	 mov	 eax, DWORD PTR _fileNumber
  00288	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _totalFiles
  0028e	0f 8c 80 01 00
	00		 jl	 $Label102$19256
; Line 152
  00294	c6 85 b0 f8 ff
	ff 31		 mov	 BYTE PTR _sendBuffer$[ebp], 49 ; 00000031H
; Line 153
  0029b	c6 85 b1 f8 ff
	ff 30		 mov	 BYTE PTR _sendBuffer$[ebp+1], 48 ; 00000030H
; Line 154
  002a2	c6 85 b2 f8 ff
	ff 33		 mov	 BYTE PTR _sendBuffer$[ebp+2], 51 ; 00000033H
; Line 157
  002a9	8b 8d 98 f8 ff
	ff		 mov	 ecx, DWORD PTR _fromlen$[ebp]
  002af	51		 push	 ecx
  002b0	8d 95 a0 f8 ff
	ff		 lea	 edx, DWORD PTR _from$[ebp]
  002b6	52		 push	 edx
  002b7	6a 00		 push	 0
  002b9	6a 12		 push	 18			; 00000012H
  002bb	8d 85 b0 f8 ff
	ff		 lea	 eax, DWORD PTR _sendBuffer$[ebp]
  002c1	50		 push	 eax
  002c2	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _msgsock$[ebp]
  002c8	51		 push	 ecx
  002c9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sendto@24
  002cf	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 158
  002d5	6a 01		 push	 1
  002d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
; Line 159
  002dd	8d 95 98 f8 ff
	ff		 lea	 edx, DWORD PTR _fromlen$[ebp]
  002e3	52		 push	 edx
  002e4	8d 85 a0 f8 ff
	ff		 lea	 eax, DWORD PTR _from$[ebp]
  002ea	50		 push	 eax
  002eb	6a 00		 push	 0
  002ed	68 80 00 00 00	 push	 128			; 00000080H
  002f2	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _Buffer$[ebp]
  002f8	51		 push	 ecx
  002f9	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _msgsock$[ebp]
  002ff	52		 push	 edx
  00300	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recvfrom@24
  00306	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 160
  0030c	83 bd 94 f8 ff
	ff ff		 cmp	 DWORD PTR _retval$[ebp], -1
  00313	75 1e		 jne	 SHORT $L19246
; Line 162
  00315	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0031b	50		 push	 eax
  0031c	68 00 00 00 00	 push	 OFFSET FLAT:$SG19247
  00321	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  00326	e8 00 00 00 00	 call	 _fprintf
  0032b	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 164
  0032e	e9 50 ff ff ff	 jmp	 $EndTransfer$19242
$L19246:
; Line 169
  00333	0f be 85 c8 fe
	ff ff		 movsx	 eax, BYTE PTR _Buffer$[ebp]
  0033a	83 f8 31	 cmp	 eax, 49			; 00000031H
  0033d	0f 85 cc 00 00
	00		 jne	 $L19249
  00343	0f be 8d c9 fe
	ff ff		 movsx	 ecx, BYTE PTR _Buffer$[ebp+1]
  0034a	83 f9 30	 cmp	 ecx, 48			; 00000030H
  0034d	0f 85 bc 00 00
	00		 jne	 $L19249
  00353	0f be 95 ca fe
	ff ff		 movsx	 edx, BYTE PTR _Buffer$[ebp+2]
  0035a	83 fa 34	 cmp	 edx, 52			; 00000034H
  0035d	0f 85 ac 00 00
	00		 jne	 $L19249
; Line 171
  00363	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _fileNumber, 0
; Line 172
  0036d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _totalFiles, 0
; Line 174
  00377	a1 00 00 00 00	 mov	 eax, DWORD PTR _TPACK
  0037c	50		 push	 eax
  0037d	68 00 00 00 00	 push	 OFFSET FLAT:$SG19250
  00382	e8 00 00 00 00	 call	 _printf
  00387	83 c4 08	 add	 esp, 8
; Line 175
  0038a	68 00 00 00 00	 push	 OFFSET FLAT:_endTime
  0038f	e8 00 00 00 00	 call	 _time
  00394	83 c4 04	 add	 esp, 4
; Line 176
  00397	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _startTime
  0039d	51		 push	 ecx
  0039e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _endTime
  003a4	52		 push	 edx
  003a5	e8 00 00 00 00	 call	 _difftime
  003aa	83 c4 08	 add	 esp, 8
  003ad	dd 15 00 00 00
	00		 fst	 QWORD PTR _dif
; Line 177
  003b3	dc 35 00 00 00
	00		 fdiv	 QWORD PTR __real@8@4004f000000000000000
  003b9	e8 00 00 00 00	 call	 __ftol
  003be	a3 00 00 00 00	 mov	 DWORD PTR _min, eax
; Line 178
  003c3	dd 05 00 00 00
	00		 fld	 QWORD PTR _dif
  003c9	e8 00 00 00 00	 call	 __ftol
  003ce	99		 cdq
  003cf	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  003d4	f7 f9		 idiv	 ecx
  003d6	89 15 00 00 00
	00		 mov	 DWORD PTR _sec, edx
; Line 179
  003dc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _sec
  003e2	52		 push	 edx
  003e3	a1 00 00 00 00	 mov	 eax, DWORD PTR _min
  003e8	50		 push	 eax
  003e9	68 00 00 00 00	 push	 OFFSET FLAT:$SG19252
  003ee	e8 00 00 00 00	 call	 _printf
  003f3	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 180
  003f6	68 00 00 00 00	 push	 OFFSET FLAT:$SG19253
  003fb	e8 00 00 00 00	 call	 _printf
  00400	83 c4 04	 add	 esp, 4
; Line 181
  00403	e8 00 00 00 00	 call	 _getch
; Line 182
  00408	6a 00		 push	 0
  0040a	e8 00 00 00 00	 call	 _exit
$L19249:
; Line 186
  0040f	e9 6f fe ff ff	 jmp	 $EndTransfer$19242
$Label102$19256:
; Line 195
  00414	8d 8d b0 f8 ff
	ff		 lea	 ecx, DWORD PTR _sendBuffer$[ebp]
  0041a	51		 push	 ecx
  0041b	e8 00 00 00 00	 call	 _Create102
  00420	83 c4 04	 add	 esp, 4
; Line 197
  00423	68 00 00 00 00	 push	 OFFSET FLAT:_startTime
  00428	e8 00 00 00 00	 call	 _time
  0042d	83 c4 04	 add	 esp, 4
; Line 200
  00430	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR _fromlen$[ebp]
  00436	52		 push	 edx
  00437	8d 85 a0 f8 ff
	ff		 lea	 eax, DWORD PTR _from$[ebp]
  0043d	50		 push	 eax
  0043e	6a 00		 push	 0
  00440	6a 12		 push	 18			; 00000012H
  00442	8d 8d b0 f8 ff
	ff		 lea	 ecx, DWORD PTR _sendBuffer$[ebp]
  00448	51		 push	 ecx
  00449	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _msgsock$[ebp]
  0044f	52		 push	 edx
  00450	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sendto@24
  00456	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 203
  0045c	83 bd 94 f8 ff
	ff ff		 cmp	 DWORD PTR _retval$[ebp], -1
  00463	75 19		 jne	 SHORT $L19259
; Line 205
  00465	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0046b	50		 push	 eax
  0046c	68 00 00 00 00	 push	 OFFSET FLAT:$SG19260
  00471	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  00476	e8 00 00 00 00	 call	 _fprintf
  0047b	83 c4 0c	 add	 esp, 12			; 0000000cH
$L19259:
; Line 210
  0047e	c6 85 b0 f8 ff
	ff 00		 mov	 BYTE PTR _sendBuffer$[ebp], 0
$OpenNext$19261:
; Line 214
  00485	8d 85 60 fe ff
	ff		 lea	 eax, DWORD PTR _Path$[ebp]
  0048b	50		 push	 eax
  0048c	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _Path2$[ebp]
  00492	51		 push	 ecx
  00493	e8 00 00 00 00	 call	 _strcpy
  00498	83 c4 08	 add	 esp, 8
; Line 215
  0049b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _fileNumber
  004a1	6b d2 54	 imul	 edx, 84			; 00000054H
  004a4	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:_File
  004aa	52		 push	 edx
  004ab	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _Path2$[ebp]
  004b1	50		 push	 eax
  004b2	e8 00 00 00 00	 call	 _strcat
  004b7	83 c4 08	 add	 esp, 8
; Line 216
  004ba	68 00 00 00 00	 push	 OFFSET FLAT:$SG19262
  004bf	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _Path2$[ebp]
  004c5	51		 push	 ecx
  004c6	e8 00 00 00 00	 call	 _fopen
  004cb	83 c4 08	 add	 esp, 8
  004ce	a3 00 00 00 00	 mov	 DWORD PTR _rdFile, eax
; Line 217
  004d3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _rdFile, 0
  004da	75 5b		 jne	 SHORT $L19264
; Line 219
  004dc	8d 95 48 ff ff
	ff		 lea	 edx, DWORD PTR _Path2$[ebp]
  004e2	52		 push	 edx
  004e3	68 00 00 00 00	 push	 OFFSET FLAT:$SG19265
  004e8	e8 00 00 00 00	 call	 _printf
  004ed	83 c4 08	 add	 esp, 8
; Line 220
  004f0	a1 00 00 00 00	 mov	 eax, DWORD PTR _rdFile
  004f5	50		 push	 eax
  004f6	e8 00 00 00 00	 call	 _fclose
  004fb	83 c4 04	 add	 esp, 4
; Line 221
  004fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _fileNumber
  00504	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _totalFiles
  0050a	7c 19		 jl	 SHORT $L19266
; Line 223
  0050c	8d 95 48 ff ff
	ff		 lea	 edx, DWORD PTR _Path2$[ebp]
  00512	52		 push	 edx
  00513	68 00 00 00 00	 push	 OFFSET FLAT:$SG19267
  00518	e8 00 00 00 00	 call	 _printf
  0051d	83 c4 08	 add	 esp, 8
; Line 224
  00520	e9 5e fd ff ff	 jmp	 $EndTransfer$19242
$L19266:
; Line 226
  00525	a1 00 00 00 00	 mov	 eax, DWORD PTR _fileNumber
  0052a	83 c0 01	 add	 eax, 1
  0052d	a3 00 00 00 00	 mov	 DWORD PTR _fileNumber, eax
; Line 227
  00532	e9 4e ff ff ff	 jmp	 $OpenNext$19261
$L19264:
; Line 229
  00537	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rdFile
  0053d	51		 push	 ecx
  0053e	e8 00 00 00 00	 call	 _fclose
  00543	83 c4 04	 add	 esp, 4
$Label201$19268:
; Line 232
  00546	8d 95 b0 f8 ff
	ff		 lea	 edx, DWORD PTR _sendBuffer$[ebp]
  0054c	52		 push	 edx
  0054d	a1 00 00 00 00	 mov	 eax, DWORD PTR _fileNumber
  00552	50		 push	 eax
  00553	e8 00 00 00 00	 call	 _Create201
  00558	83 c4 08	 add	 esp, 8
; Line 235
  0055b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _TPACK
  00561	51		 push	 ecx
  00562	68 00 00 00 00	 push	 OFFSET FLAT:$SG19270
  00567	e8 00 00 00 00	 call	 _printf
  0056c	83 c4 08	 add	 esp, 8
; Line 237
  0056f	8b 95 98 f8 ff
	ff		 mov	 edx, DWORD PTR _fromlen$[ebp]
  00575	52		 push	 edx
  00576	8d 85 a0 f8 ff
	ff		 lea	 eax, DWORD PTR _from$[ebp]
  0057c	50		 push	 eax
  0057d	6a 00		 push	 0
  0057f	6a 64		 push	 100			; 00000064H
  00581	8d 8d b0 f8 ff
	ff		 lea	 ecx, DWORD PTR _sendBuffer$[ebp]
  00587	51		 push	 ecx
  00588	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _msgsock$[ebp]
  0058e	52		 push	 edx
  0058f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sendto@24
  00595	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 239
  0059b	83 bd 94 f8 ff
	ff ff		 cmp	 DWORD PTR _retval$[ebp], -1
  005a2	75 19		 jne	 SHORT $L19272
; Line 241
  005a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  005aa	50		 push	 eax
  005ab	68 00 00 00 00	 push	 OFFSET FLAT:$SG19273
  005b0	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  005b5	e8 00 00 00 00	 call	 _fprintf
  005ba	83 c4 0c	 add	 esp, 12			; 0000000cH
$L19272:
; Line 245
  005bd	c6 85 b0 f8 ff
	ff 00		 mov	 BYTE PTR _sendBuffer$[ebp], 0
; Line 251
  005c4	83 bd c8 fc ff
	ff 00		 cmp	 DWORD PTR _iMode$[ebp], 0
  005cb	75 58		 jne	 SHORT $L19278
; Line 253
  005cd	c7 85 c8 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR _iMode$[ebp], 1
; Line 254
  005d7	8d 85 c8 fc ff
	ff		 lea	 eax, DWORD PTR _iMode$[ebp]
  005dd	50		 push	 eax
  005de	68 7e 66 04 80	 push	 -2147195266		; 8004667eH
  005e3	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _msgsock$[ebp]
  005e9	51		 push	 ecx
  005ea	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ioctlsocket@12
  005f0	89 85 80 f8 ff
	ff		 mov	 DWORD PTR _block$[ebp], eax
; Line 255
  005f6	83 bd 80 f8 ff
	ff 00		 cmp	 DWORD PTR _block$[ebp], 0
  005fd	74 26		 je	 SHORT $L19278
; Line 257
  005ff	68 00 00 00 00	 push	 OFFSET FLAT:$SG19279
  00604	e8 00 00 00 00	 call	 _printf
  00609	83 c4 04	 add	 esp, 4
; Line 258
  0060c	68 00 00 00 00	 push	 OFFSET FLAT:$SG19280
  00611	e8 00 00 00 00	 call	 _printf
  00616	83 c4 04	 add	 esp, 4
; Line 259
  00619	e8 00 00 00 00	 call	 _getch
; Line 260
  0061e	6a 00		 push	 0
  00620	e8 00 00 00 00	 call	 _exit
$L19278:
; Line 264
  00625	c6 85 c8 fe ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp], 0
; Line 265
  0062c	c6 85 c9 fe ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp+1], 0
; Line 266
  00633	c6 85 ca fe ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp+2], 0
; Line 267
  0063a	6a 01		 push	 1
  0063c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
; Line 269
  00642	8d 95 98 f8 ff
	ff		 lea	 edx, DWORD PTR _fromlen$[ebp]
  00648	52		 push	 edx
  00649	8d 85 a0 f8 ff
	ff		 lea	 eax, DWORD PTR _from$[ebp]
  0064f	50		 push	 eax
  00650	6a 00		 push	 0
  00652	68 80 00 00 00	 push	 128			; 00000080H
  00657	8d 8d c8 fe ff
	ff		 lea	 ecx, DWORD PTR _Buffer$[ebp]
  0065d	51		 push	 ecx
  0065e	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _msgsock$[ebp]
  00664	52		 push	 edx
  00665	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recvfrom@24
  0066b	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 286
  00671	83 bd 94 f8 ff
	ff ff		 cmp	 DWORD PTR _retval$[ebp], -1
  00678	75 1e		 jne	 SHORT $L19282
; Line 288
  0067a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00680	50		 push	 eax
  00681	68 00 00 00 00	 push	 OFFSET FLAT:$SG19283
  00686	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  0068b	e8 00 00 00 00	 call	 _fprintf
  00690	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 290
  00693	e9 ae fe ff ff	 jmp	 $Label201$19268
$L19282:
; Line 294
  00698	0f be 85 c8 fe
	ff ff		 movsx	 eax, BYTE PTR _Buffer$[ebp]
  0069f	83 f8 32	 cmp	 eax, 50			; 00000032H
  006a2	75 1d		 jne	 SHORT $L19285
  006a4	0f be 8d c9 fe
	ff ff		 movsx	 ecx, BYTE PTR _Buffer$[ebp+1]
  006ab	83 f9 30	 cmp	 ecx, 48			; 00000030H
  006ae	75 11		 jne	 SHORT $L19285
  006b0	0f be 95 ca fe
	ff ff		 movsx	 edx, BYTE PTR _Buffer$[ebp+2]
  006b7	83 fa 32	 cmp	 edx, 50			; 00000032H
  006ba	75 05		 jne	 SHORT $L19285
; Line 296
  006bc	e9 b1 00 00 00	 jmp	 $Label301$19286
$L19285:
; Line 298
  006c1	0f be 85 c8 fe
	ff ff		 movsx	 eax, BYTE PTR _Buffer$[ebp]
  006c8	83 f8 32	 cmp	 eax, 50			; 00000032H
  006cb	75 2a		 jne	 SHORT $L19288
  006cd	0f be 8d c9 fe
	ff ff		 movsx	 ecx, BYTE PTR _Buffer$[ebp+1]
  006d4	83 f9 30	 cmp	 ecx, 48			; 00000030H
  006d7	75 1e		 jne	 SHORT $L19288
  006d9	0f be 95 ca fe
	ff ff		 movsx	 edx, BYTE PTR _Buffer$[ebp+2]
  006e0	83 fa 34	 cmp	 edx, 52			; 00000034H
  006e3	75 12		 jne	 SHORT $L19288
; Line 300
  006e5	a1 00 00 00 00	 mov	 eax, DWORD PTR _fileNumber
  006ea	83 c0 01	 add	 eax, 1
  006ed	a3 00 00 00 00	 mov	 DWORD PTR _fileNumber, eax
; Line 301
  006f2	e9 8e fd ff ff	 jmp	 $OpenNext$19261
$L19288:
; Line 303
  006f7	0f be 8d c8 fe
	ff ff		 movsx	 ecx, BYTE PTR _Buffer$[ebp]
  006fe	83 f9 32	 cmp	 ecx, 50			; 00000032H
  00701	75 31		 jne	 SHORT $L19290
  00703	0f be 95 c9 fe
	ff ff		 movsx	 edx, BYTE PTR _Buffer$[ebp+1]
  0070a	83 fa 30	 cmp	 edx, 48			; 00000030H
  0070d	75 25		 jne	 SHORT $L19290
  0070f	0f be 85 ca fe
	ff ff		 movsx	 eax, BYTE PTR _Buffer$[ebp+2]
  00716	83 f8 33	 cmp	 eax, 51			; 00000033H
  00719	75 19		 jne	 SHORT $L19290
; Line 305
  0071b	68 00 00 00 00	 push	 OFFSET FLAT:$SG19291
  00720	e8 00 00 00 00	 call	 _printf
  00725	83 c4 04	 add	 esp, 4
; Line 306
  00728	e8 00 00 00 00	 call	 _getch
; Line 307
  0072d	6a 00		 push	 0
  0072f	e8 00 00 00 00	 call	 _exit
$L19290:
; Line 309
  00734	0f be 8d c8 fe
	ff ff		 movsx	 ecx, BYTE PTR _Buffer$[ebp]
  0073b	83 f9 31	 cmp	 ecx, 49			; 00000031H
  0073e	75 1d		 jne	 SHORT $L19292
  00740	0f be 95 c9 fe
	ff ff		 movsx	 edx, BYTE PTR _Buffer$[ebp+1]
  00747	83 fa 30	 cmp	 edx, 48			; 00000030H
  0074a	75 11		 jne	 SHORT $L19292
  0074c	0f be 85 ca fe
	ff ff		 movsx	 eax, BYTE PTR _Buffer$[ebp+2]
  00753	83 f8 31	 cmp	 eax, 49			; 00000031H
  00756	75 05		 jne	 SHORT $L19292
; Line 311
  00758	e9 b7 fc ff ff	 jmp	 $Label102$19256
$L19292:
; Line 315
  0075d	e9 e4 fd ff ff	 jmp	 $Label201$19268
$L19241:
; Line 321
  00762	81 bd 88 f8 ff
	ff 2d 01 00 00	 cmp	 DWORD PTR _statusCode$[ebp], 301 ; 0000012dH
  0076c	0f 85 36 06 00
	00		 jne	 $L19295
$Label301$19286:
; Line 326
  00772	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR _Path$[ebp]
  00778	51		 push	 ecx
  00779	8d 95 48 ff ff
	ff		 lea	 edx, DWORD PTR _Path2$[ebp]
  0077f	52		 push	 edx
  00780	e8 00 00 00 00	 call	 _strcpy
  00785	83 c4 08	 add	 esp, 8
; Line 327
  00788	a1 00 00 00 00	 mov	 eax, DWORD PTR _fileNumber
  0078d	6b c0 54	 imul	 eax, 84			; 00000054H
  00790	05 00 00 00 00	 add	 eax, OFFSET FLAT:_File
  00795	50		 push	 eax
  00796	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR _Path2$[ebp]
  0079c	51		 push	 ecx
  0079d	e8 00 00 00 00	 call	 _strcat
  007a2	83 c4 08	 add	 esp, 8
; Line 328
  007a5	68 00 00 00 00	 push	 OFFSET FLAT:$SG19296
  007aa	8d 95 48 ff ff
	ff		 lea	 edx, DWORD PTR _Path2$[ebp]
  007b0	52		 push	 edx
  007b1	e8 00 00 00 00	 call	 _fopen
  007b6	83 c4 08	 add	 esp, 8
  007b9	a3 00 00 00 00	 mov	 DWORD PTR _rdFile, eax
; Line 329
  007be	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _rdFile, 0
  007c5	75 28		 jne	 SHORT $L19298
; Line 331
  007c7	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _Path2$[ebp]
  007cd	50		 push	 eax
  007ce	68 00 00 00 00	 push	 OFFSET FLAT:$SG19299
  007d3	e8 00 00 00 00	 call	 _printf
  007d8	83 c4 08	 add	 esp, 8
; Line 332
  007db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _fileNumber
  007e1	83 c1 01	 add	 ecx, 1
  007e4	89 0d 00 00 00
	00		 mov	 DWORD PTR _fileNumber, ecx
; Line 333
  007ea	e9 96 fc ff ff	 jmp	 $OpenNext$19261
$L19298:
; Line 337
  007ef	6a 00		 push	 0
  007f1	6a 00		 push	 0
  007f3	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _rdFile
  007f9	52		 push	 edx
  007fa	e8 00 00 00 00	 call	 _fseek
  007ff	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 341
  00802	c6 85 b0 f8 ff
	ff 33		 mov	 BYTE PTR _sendBuffer$[ebp], 51 ; 00000033H
; Line 342
  00809	c6 85 b1 f8 ff
	ff 30		 mov	 BYTE PTR _sendBuffer$[ebp+1], 48 ; 00000030H
; Line 343
  00810	c6 85 b2 f8 ff
	ff 31		 mov	 BYTE PTR _sendBuffer$[ebp+2], 49 ; 00000031H
; Line 346
  00817	c6 85 b3 f8 ff
	ff 10		 mov	 BYTE PTR _sendBuffer$[ebp+3], 16 ; 00000010H
; Line 347
  0081e	c6 85 b4 f8 ff
	ff 13		 mov	 BYTE PTR _sendBuffer$[ebp+4], 19 ; 00000013H
; Line 349
  00825	c6 85 b7 f8 ff
	ff 10		 mov	 BYTE PTR _sendBuffer$[ebp+7], 16 ; 00000010H
; Line 350
  0082c	c6 85 b8 f8 ff
	ff 13		 mov	 BYTE PTR _sendBuffer$[ebp+8], 19 ; 00000013H
; Line 352
  00833	c6 85 bb f8 ff
	ff 10		 mov	 BYTE PTR _sendBuffer$[ebp+11], 16 ; 00000010H
; Line 353
  0083a	c6 85 bc f8 ff
	ff 13		 mov	 BYTE PTR _sendBuffer$[ebp+12], 19 ; 00000013H
; Line 359
  00841	c7 85 5c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _seq$[ebp], OFFSET FLAT:_nextSeq
$Label2$19304:
; Line 363
  0084b	8b 85 5c fe ff
	ff		 mov	 eax, DWORD PTR _seq$[ebp]
  00851	8a 08		 mov	 cl, BYTE PTR [eax]
  00853	88 8d b5 f8 ff
	ff		 mov	 BYTE PTR _sendBuffer$[ebp+5], cl
; Line 364
  00859	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _seq$[ebp]
  0085f	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00862	88 85 b6 f8 ff
	ff		 mov	 BYTE PTR _sendBuffer$[ebp+6], al
; Line 365
  00868	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rdFile
  0086e	51		 push	 ecx
  0086f	68 e8 03 00 00	 push	 1000			; 000003e8H
  00874	6a 01		 push	 1
  00876	8d 95 bd f8 ff
	ff		 lea	 edx, DWORD PTR _sendBuffer$[ebp+13]
  0087c	52		 push	 edx
  0087d	e8 00 00 00 00	 call	 _fread
  00882	83 c4 10	 add	 esp, 16			; 00000010H
  00885	89 45 fc	 mov	 DWORD PTR _Size$[ebp], eax
; Line 367
  00888	81 7d fc e8 03
	00 00		 cmp	 DWORD PTR _Size$[ebp], 1000 ; 000003e8H
  0088f	7d 3e		 jge	 SHORT $L19308
; Line 369
  00891	c7 85 ac fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  0089b	eb 0f		 jmp	 SHORT $L19306
$L19307:
  0089d	8b 85 ac fc ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  008a3	83 c0 01	 add	 eax, 1
  008a6	89 85 ac fc ff
	ff		 mov	 DWORD PTR _i$[ebp], eax
$L19306:
  008ac	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  008b1	2b 4d fc	 sub	 ecx, DWORD PTR _Size$[ebp]
  008b4	39 8d ac fc ff
	ff		 cmp	 DWORD PTR _i$[ebp], ecx
  008ba	7d 13		 jge	 SHORT $L19308
; Line 371
  008bc	8b 55 fc	 mov	 edx, DWORD PTR _Size$[ebp]
  008bf	03 95 ac fc ff
	ff		 add	 edx, DWORD PTR _i$[ebp]
  008c5	c6 84 15 bd f8
	ff ff 00	 mov	 BYTE PTR _sendBuffer$[ebp+edx+13], 0
; Line 373
  008cd	eb ce		 jmp	 SHORT $L19307
$L19308:
; Line 376
  008cf	8d 45 fc	 lea	 eax, DWORD PTR _Size$[ebp]
  008d2	89 85 c4 fc ff
	ff		 mov	 DWORD PTR _conv$[ebp], eax
; Line 377
  008d8	8b 8d c4 fc ff
	ff		 mov	 ecx, DWORD PTR _conv$[ebp]
  008de	8a 11		 mov	 dl, BYTE PTR [ecx]
  008e0	88 95 b9 f8 ff
	ff		 mov	 BYTE PTR _sendBuffer$[ebp+9], dl
; Line 378
  008e6	8b 85 c4 fc ff
	ff		 mov	 eax, DWORD PTR _conv$[ebp]
  008ec	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  008ef	88 8d ba f8 ff
	ff		 mov	 BYTE PTR _sendBuffer$[ebp+10], cl
; Line 380
  008f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _nextSeq
  008fb	83 c2 01	 add	 edx, 1
  008fe	89 15 00 00 00
	00		 mov	 DWORD PTR _nextSeq, edx
$Label1$19310:
; Line 382
  00904	6a 01		 push	 1
  00906	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
; Line 383
  0090c	8b 85 98 f8 ff
	ff		 mov	 eax, DWORD PTR _fromlen$[ebp]
  00912	50		 push	 eax
  00913	8d 8d a0 f8 ff
	ff		 lea	 ecx, DWORD PTR _from$[ebp]
  00919	51		 push	 ecx
  0091a	6a 00		 push	 0
  0091c	68 fc 03 00 00	 push	 1020			; 000003fcH
  00921	8d 95 b0 f8 ff
	ff		 lea	 edx, DWORD PTR _sendBuffer$[ebp]
  00927	52		 push	 edx
  00928	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _msgsock$[ebp]
  0092e	50		 push	 eax
  0092f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sendto@24
  00935	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 384
  0093b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _TPACK
  00941	83 c1 01	 add	 ecx, 1
  00944	89 0d 00 00 00
	00		 mov	 DWORD PTR _TPACK, ecx
; Line 385
  0094a	83 bd 94 f8 ff
	ff ff		 cmp	 DWORD PTR _retval$[ebp], -1
  00951	75 19		 jne	 SHORT $L19312
; Line 387
  00953	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00959	50		 push	 eax
  0095a	68 00 00 00 00	 push	 OFFSET FLAT:$SG19313
  0095f	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  00964	e8 00 00 00 00	 call	 _fprintf
  00969	83 c4 0c	 add	 esp, 12			; 0000000cH
$L19312:
; Line 396
  0096c	83 bd c8 fc ff
	ff 00		 cmp	 DWORD PTR _iMode$[ebp], 0
  00973	75 58		 jne	 SHORT $L19318
; Line 398
  00975	c7 85 c8 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR _iMode$[ebp], 1
; Line 399
  0097f	8d 95 c8 fc ff
	ff		 lea	 edx, DWORD PTR _iMode$[ebp]
  00985	52		 push	 edx
  00986	68 7e 66 04 80	 push	 -2147195266		; 8004667eH
  0098b	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _msgsock$[ebp]
  00991	50		 push	 eax
  00992	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ioctlsocket@12
  00998	89 85 80 f8 ff
	ff		 mov	 DWORD PTR _block$[ebp], eax
; Line 400
  0099e	83 bd 80 f8 ff
	ff 00		 cmp	 DWORD PTR _block$[ebp], 0
  009a5	74 26		 je	 SHORT $L19318
; Line 402
  009a7	68 00 00 00 00	 push	 OFFSET FLAT:$SG19319
  009ac	e8 00 00 00 00	 call	 _printf
  009b1	83 c4 04	 add	 esp, 4
; Line 403
  009b4	68 00 00 00 00	 push	 OFFSET FLAT:$SG19320
  009b9	e8 00 00 00 00	 call	 _printf
  009be	83 c4 04	 add	 esp, 4
; Line 404
  009c1	e8 00 00 00 00	 call	 _getch
; Line 405
  009c6	6a 00		 push	 0
  009c8	e8 00 00 00 00	 call	 _exit
$L19318:
; Line 408
  009cd	c6 85 c8 fe ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp], 0
; Line 409
  009d4	c6 85 c9 fe ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp+1], 0
; Line 410
  009db	c6 85 ca fe ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp+2], 0
; Line 446
  009e2	81 7d fc e8 03
	00 00		 cmp	 DWORD PTR _Size$[ebp], 1000 ; 000003e8H
  009e9	0f 84 5c fe ff
	ff		 je	 $Label2$19304
; Line 454
  009ef	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _nextSeq, 0
$Label303$19321:
; Line 458
  009f9	c6 85 b0 f8 ff
	ff 33		 mov	 BYTE PTR _sendBuffer$[ebp], 51 ; 00000033H
; Line 459
  00a00	c6 85 b1 f8 ff
	ff 30		 mov	 BYTE PTR _sendBuffer$[ebp+1], 48 ; 00000030H
; Line 460
  00a07	c6 85 b2 f8 ff
	ff 33		 mov	 BYTE PTR _sendBuffer$[ebp+2], 51 ; 00000033H
; Line 463
  00a0e	83 bd c8 fc ff
	ff 00		 cmp	 DWORD PTR _iMode$[ebp], 0
  00a15	74 53		 je	 SHORT $L19326
; Line 465
  00a17	c7 85 c8 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _iMode$[ebp], 0
; Line 466
  00a21	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _iMode$[ebp]
  00a27	51		 push	 ecx
  00a28	68 7e 66 04 80	 push	 -2147195266		; 8004667eH
  00a2d	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _msgsock$[ebp]
  00a33	52		 push	 edx
  00a34	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ioctlsocket@12
  00a3a	89 85 80 f8 ff
	ff		 mov	 DWORD PTR _block$[ebp], eax
; Line 467
  00a40	83 bd 80 f8 ff
	ff 00		 cmp	 DWORD PTR _block$[ebp], 0
  00a47	74 21		 je	 SHORT $L19326
; Line 469
  00a49	68 00 00 00 00	 push	 OFFSET FLAT:$SG19327
  00a4e	e8 00 00 00 00	 call	 _printf
  00a53	83 c4 04	 add	 esp, 4
; Line 470
  00a56	68 00 00 00 00	 push	 OFFSET FLAT:$SG19328
  00a5b	e8 00 00 00 00	 call	 _printf
  00a60	83 c4 04	 add	 esp, 4
; Line 472
  00a63	6a 00		 push	 0
  00a65	e8 00 00 00 00	 call	 _exit
$L19326:
; Line 478
  00a6a	8b 85 98 f8 ff
	ff		 mov	 eax, DWORD PTR _fromlen$[ebp]
  00a70	50		 push	 eax
  00a71	8d 8d a0 f8 ff
	ff		 lea	 ecx, DWORD PTR _from$[ebp]
  00a77	51		 push	 ecx
  00a78	6a 00		 push	 0
  00a7a	6a 12		 push	 18			; 00000012H
  00a7c	8d 95 b0 f8 ff
	ff		 lea	 edx, DWORD PTR _sendBuffer$[ebp]
  00a82	52		 push	 edx
  00a83	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _msgsock$[ebp]
  00a89	50		 push	 eax
  00a8a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sendto@24
  00a90	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 479
  00a96	83 bd 94 f8 ff
	ff ff		 cmp	 DWORD PTR _retval$[ebp], -1
  00a9d	75 19		 jne	 SHORT $L19330
; Line 481
  00a9f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00aa5	50		 push	 eax
  00aa6	68 00 00 00 00	 push	 OFFSET FLAT:$SG19331
  00aab	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  00ab0	e8 00 00 00 00	 call	 _fprintf
  00ab5	83 c4 0c	 add	 esp, 12			; 0000000cH
$L19330:
; Line 485
  00ab8	c6 85 b0 f8 ff
	ff 00		 mov	 BYTE PTR _sendBuffer$[ebp], 0
; Line 487
  00abf	c6 85 c8 fe ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp], 0
; Line 488
  00ac6	c6 85 c9 fe ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp+1], 0
; Line 489
  00acd	c6 85 ca fe ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp+2], 0
; Line 491
  00ad4	83 bd c8 fc ff
	ff 00		 cmp	 DWORD PTR _iMode$[ebp], 0
  00adb	75 53		 jne	 SHORT $Label305$19339
; Line 493
  00add	c7 85 c8 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR _iMode$[ebp], 1
; Line 494
  00ae7	8d 8d c8 fc ff
	ff		 lea	 ecx, DWORD PTR _iMode$[ebp]
  00aed	51		 push	 ecx
  00aee	68 7e 66 04 80	 push	 -2147195266		; 8004667eH
  00af3	8b 95 c0 fc ff
	ff		 mov	 edx, DWORD PTR _msgsock$[ebp]
  00af9	52		 push	 edx
  00afa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ioctlsocket@12
  00b00	89 85 80 f8 ff
	ff		 mov	 DWORD PTR _block$[ebp], eax
; Line 495
  00b06	83 bd 80 f8 ff
	ff 00		 cmp	 DWORD PTR _block$[ebp], 0
  00b0d	74 21		 je	 SHORT $Label305$19339
; Line 497
  00b0f	68 00 00 00 00	 push	 OFFSET FLAT:$SG19337
  00b14	e8 00 00 00 00	 call	 _printf
  00b19	83 c4 04	 add	 esp, 4
; Line 498
  00b1c	68 00 00 00 00	 push	 OFFSET FLAT:$SG19338
  00b21	e8 00 00 00 00	 call	 _printf
  00b26	83 c4 04	 add	 esp, 4
; Line 500
  00b29	6a 00		 push	 0
  00b2b	e8 00 00 00 00	 call	 _exit
$Label305$19339:
; Line 504
  00b30	6a 01		 push	 1
  00b32	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
; Line 507
  00b38	8d 85 98 f8 ff
	ff		 lea	 eax, DWORD PTR _fromlen$[ebp]
  00b3e	50		 push	 eax
  00b3f	8d 8d a0 f8 ff
	ff		 lea	 ecx, DWORD PTR _from$[ebp]
  00b45	51		 push	 ecx
  00b46	6a 00		 push	 0
  00b48	68 80 00 00 00	 push	 128			; 00000080H
  00b4d	8d 95 c8 fe ff
	ff		 lea	 edx, DWORD PTR _Buffer$[ebp]
  00b53	52		 push	 edx
  00b54	8b 85 c0 fc ff
	ff		 mov	 eax, DWORD PTR _msgsock$[ebp]
  00b5a	50		 push	 eax
  00b5b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__recvfrom@24
  00b61	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 511
  00b67	83 bd 94 f8 ff
	ff ff		 cmp	 DWORD PTR _retval$[ebp], -1
  00b6e	75 1e		 jne	 SHORT $L19341
; Line 513
  00b70	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  00b76	50		 push	 eax
  00b77	68 00 00 00 00	 push	 OFFSET FLAT:$SG19342
  00b7c	68 40 00 00 00	 push	 OFFSET FLAT:__iob+64
  00b81	e8 00 00 00 00	 call	 _fprintf
  00b86	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 515
  00b89	e9 6b fe ff ff	 jmp	 $Label303$19321
$L19341:
; Line 519
  00b8e	0f be 8d c8 fe
	ff ff		 movsx	 ecx, BYTE PTR _Buffer$[ebp]
  00b95	83 f9 33	 cmp	 ecx, 51			; 00000033H
  00b98	75 4d		 jne	 SHORT $L19344
  00b9a	0f be 95 c9 fe
	ff ff		 movsx	 edx, BYTE PTR _Buffer$[ebp+1]
  00ba1	83 fa 30	 cmp	 edx, 48			; 00000030H
  00ba4	75 41		 jne	 SHORT $L19344
  00ba6	0f be 85 ca fe
	ff ff		 movsx	 eax, BYTE PTR _Buffer$[ebp+2]
  00bad	83 f8 34	 cmp	 eax, 52			; 00000034H
  00bb0	75 35		 jne	 SHORT $L19344
; Line 521
  00bb2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _rdFile
  00bb8	51		 push	 ecx
  00bb9	e8 00 00 00 00	 call	 _fclose
  00bbe	83 c4 04	 add	 esp, 4
; Line 522
  00bc1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _fileNumber
  00bc7	83 c2 01	 add	 edx, 1
  00bca	89 15 00 00 00
	00		 mov	 DWORD PTR _fileNumber, edx
; Line 523
  00bd0	a1 00 00 00 00	 mov	 eax, DWORD PTR _fileNumber
  00bd5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _totalFiles
  00bdb	7c 05		 jl	 SHORT $L19345
; Line 525
  00bdd	e9 a1 f6 ff ff	 jmp	 $EndTransfer$19242
$L19345:
; Line 530
  00be2	e9 9e f8 ff ff	 jmp	 $OpenNext$19261
$L19344:
; Line 533
  00be7	0f be 8d c8 fe
	ff ff		 movsx	 ecx, BYTE PTR _Buffer$[ebp]
  00bee	83 f9 33	 cmp	 ecx, 51			; 00000033H
  00bf1	0f 85 ac 01 00
	00		 jne	 $L19348
  00bf7	0f be 95 c9 fe
	ff ff		 movsx	 edx, BYTE PTR _Buffer$[ebp+1]
  00bfe	83 fa 30	 cmp	 edx, 48			; 00000030H
  00c01	0f 85 9c 01 00
	00		 jne	 $L19348
  00c07	0f be 85 ca fe
	ff ff		 movsx	 eax, BYTE PTR _Buffer$[ebp+2]
  00c0e	83 f8 36	 cmp	 eax, 54			; 00000036H
  00c11	0f 85 8c 01 00
	00		 jne	 $L19348
; Line 536
  00c17	0f be 8d ce fe
	ff ff		 movsx	 ecx, BYTE PTR _Buffer$[ebp+6]
  00c1e	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00c24	89 8d 90 f8 ff
	ff		 mov	 DWORD PTR _ack$[ebp], ecx
; Line 537
  00c2a	8b 95 90 f8 ff
	ff		 mov	 edx, DWORD PTR _ack$[ebp]
  00c30	c1 e2 08	 shl	 edx, 8
  00c33	81 e2 00 ff 00
	00		 and	 edx, 65280		; 0000ff00H
  00c39	0f be 85 cd fe
	ff ff		 movsx	 eax, BYTE PTR _Buffer$[ebp+5]
  00c40	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00c45	0b d0		 or	 edx, eax
  00c47	89 95 90 f8 ff
	ff		 mov	 DWORD PTR _ack$[ebp], edx
; Line 538
  00c4d	8b 8d 90 f8 ff
	ff		 mov	 ecx, DWORD PTR _ack$[ebp]
  00c53	51		 push	 ecx
  00c54	68 00 00 00 00	 push	 OFFSET FLAT:$SG19349
  00c59	e8 00 00 00 00	 call	 _printf
  00c5e	83 c4 08	 add	 esp, 8
; Line 540
  00c61	6a 00		 push	 0
  00c63	8b 95 90 f8 ff
	ff		 mov	 edx, DWORD PTR _ack$[ebp]
  00c69	69 d2 e8 03 00
	00		 imul	 edx, 1000		; 000003e8H
  00c6f	52		 push	 edx
  00c70	a1 00 00 00 00	 mov	 eax, DWORD PTR _rdFile
  00c75	50		 push	 eax
  00c76	e8 00 00 00 00	 call	 _fseek
  00c7b	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 542
  00c7e	8d 8d 90 f8 ff
	ff		 lea	 ecx, DWORD PTR _ack$[ebp]
  00c84	89 8d 5c fe ff
	ff		 mov	 DWORD PTR _seq$[ebp], ecx
; Line 544
  00c8a	8b 95 5c fe ff
	ff		 mov	 edx, DWORD PTR _seq$[ebp]
  00c90	8a 02		 mov	 al, BYTE PTR [edx]
  00c92	88 85 b5 f8 ff
	ff		 mov	 BYTE PTR _sendBuffer$[ebp+5], al
; Line 545
  00c98	8b 8d 5c fe ff
	ff		 mov	 ecx, DWORD PTR _seq$[ebp]
  00c9e	8a 51 01	 mov	 dl, BYTE PTR [ecx+1]
  00ca1	88 95 b6 f8 ff
	ff		 mov	 BYTE PTR _sendBuffer$[ebp+6], dl
; Line 546
  00ca7	a1 00 00 00 00	 mov	 eax, DWORD PTR _rdFile
  00cac	50		 push	 eax
  00cad	68 e8 03 00 00	 push	 1000			; 000003e8H
  00cb2	6a 01		 push	 1
  00cb4	8d 8d bd f8 ff
	ff		 lea	 ecx, DWORD PTR _sendBuffer$[ebp+13]
  00cba	51		 push	 ecx
  00cbb	e8 00 00 00 00	 call	 _fread
  00cc0	83 c4 10	 add	 esp, 16			; 00000010H
  00cc3	89 45 fc	 mov	 DWORD PTR _Size$[ebp], eax
; Line 548
  00cc6	81 7d fc e8 03
	00 00		 cmp	 DWORD PTR _Size$[ebp], 1000 ; 000003e8H
  00ccd	7d 3e		 jge	 SHORT $L19354
; Line 550
  00ccf	c7 85 ac fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00cd9	eb 0f		 jmp	 SHORT $L19352
$L19353:
  00cdb	8b 95 ac fc ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  00ce1	83 c2 01	 add	 edx, 1
  00ce4	89 95 ac fc ff
	ff		 mov	 DWORD PTR _i$[ebp], edx
$L19352:
  00cea	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  00cef	2b 45 fc	 sub	 eax, DWORD PTR _Size$[ebp]
  00cf2	39 85 ac fc ff
	ff		 cmp	 DWORD PTR _i$[ebp], eax
  00cf8	7d 13		 jge	 SHORT $L19354
; Line 552
  00cfa	8b 4d fc	 mov	 ecx, DWORD PTR _Size$[ebp]
  00cfd	03 8d ac fc ff
	ff		 add	 ecx, DWORD PTR _i$[ebp]
  00d03	c6 84 0d bd f8
	ff ff 00	 mov	 BYTE PTR _sendBuffer$[ebp+ecx+13], 0
; Line 554
  00d0b	eb ce		 jmp	 SHORT $L19353
$L19354:
; Line 557
  00d0d	8d 55 fc	 lea	 edx, DWORD PTR _Size$[ebp]
  00d10	89 95 c4 fc ff
	ff		 mov	 DWORD PTR _conv$[ebp], edx
; Line 558
  00d16	8b 85 c4 fc ff
	ff		 mov	 eax, DWORD PTR _conv$[ebp]
  00d1c	8a 08		 mov	 cl, BYTE PTR [eax]
  00d1e	88 8d b9 f8 ff
	ff		 mov	 BYTE PTR _sendBuffer$[ebp+9], cl
; Line 559
  00d24	8b 95 c4 fc ff
	ff		 mov	 edx, DWORD PTR _conv$[ebp]
  00d2a	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00d2d	88 85 ba f8 ff
	ff		 mov	 BYTE PTR _sendBuffer$[ebp+10], al
; Line 563
  00d33	c6 85 b0 f8 ff
	ff 33		 mov	 BYTE PTR _sendBuffer$[ebp], 51 ; 00000033H
; Line 564
  00d3a	c6 85 b1 f8 ff
	ff 30		 mov	 BYTE PTR _sendBuffer$[ebp+1], 48 ; 00000030H
; Line 565
  00d41	c6 85 b2 f8 ff
	ff 35		 mov	 BYTE PTR _sendBuffer$[ebp+2], 53 ; 00000035H
; Line 568
  00d48	c6 85 b3 f8 ff
	ff 10		 mov	 BYTE PTR _sendBuffer$[ebp+3], 16 ; 00000010H
; Line 569
  00d4f	c6 85 b4 f8 ff
	ff 13		 mov	 BYTE PTR _sendBuffer$[ebp+4], 19 ; 00000013H
; Line 571
  00d56	c6 85 b7 f8 ff
	ff 10		 mov	 BYTE PTR _sendBuffer$[ebp+7], 16 ; 00000010H
; Line 572
  00d5d	c6 85 b8 f8 ff
	ff 13		 mov	 BYTE PTR _sendBuffer$[ebp+8], 19 ; 00000013H
; Line 574
  00d64	c6 85 bb f8 ff
	ff 10		 mov	 BYTE PTR _sendBuffer$[ebp+11], 16 ; 00000010H
; Line 575
  00d6b	c6 85 bc f8 ff
	ff 13		 mov	 BYTE PTR _sendBuffer$[ebp+12], 19 ; 00000013H
; Line 581
  00d72	8b 8d 98 f8 ff
	ff		 mov	 ecx, DWORD PTR _fromlen$[ebp]
  00d78	51		 push	 ecx
  00d79	8d 95 a0 f8 ff
	ff		 lea	 edx, DWORD PTR _from$[ebp]
  00d7f	52		 push	 edx
  00d80	6a 00		 push	 0
  00d82	6a 12		 push	 18			; 00000012H
  00d84	8d 85 b0 f8 ff
	ff		 lea	 eax, DWORD PTR _sendBuffer$[ebp]
  00d8a	50		 push	 eax
  00d8b	8b 8d c0 fc ff
	ff		 mov	 ecx, DWORD PTR _msgsock$[ebp]
  00d91	51		 push	 ecx
  00d92	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__sendto@24
  00d98	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _retval$[ebp], eax
; Line 582
  00d9e	e9 8d fd ff ff	 jmp	 $Label305$19339
$L19348:
; Line 586
  00da3	e9 51 fc ff ff	 jmp	 $Label303$19321
$L19295:
; Line 597
  00da8	e9 da f3 ff ff	 jmp	 $L19228
$L19232:
; Line 615
  00dad	5f		 pop	 edi
  00dae	8b e5		 mov	 esp, ebp
  00db0	5d		 pop	 ebp
  00db1	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+1
$SG19369 DB	0aH, 'Connection requested by %s', 0aH, 00H
_DATA	ENDS
_TEXT	SEGMENT
_bufferAdd$ = 8
_i$ = -8
_bufferPtr$ = -4
_Protocol PROC NEAR
; Line 618
  00db2	55		 push	 ebp
  00db3	8b ec		 mov	 ebp, esp
  00db5	83 ec 08	 sub	 esp, 8
; Line 621
  00db8	8b 45 08	 mov	 eax, DWORD PTR _bufferAdd$[ebp]
  00dbb	89 45 fc	 mov	 DWORD PTR _bufferPtr$[ebp], eax
; Line 622
  00dbe	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00dc5	83 7d f8 03	 cmp	 DWORD PTR _i$[ebp], 3
  00dc9	0f 8d 66 01 00
	00		 jge	 $L19367
; Line 624
  00dcf	8b 55 fc	 mov	 edx, DWORD PTR _bufferPtr$[ebp]
  00dd2	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00dd5	83 f8 31	 cmp	 eax, 49			; 00000031H
  00dd8	75 34		 jne	 SHORT $L19368
  00dda	8b 4d fc	 mov	 ecx, DWORD PTR _bufferPtr$[ebp]
  00ddd	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  00de1	83 fa 30	 cmp	 edx, 48			; 00000030H
  00de4	75 28		 jne	 SHORT $L19368
  00de6	8b 45 fc	 mov	 eax, DWORD PTR _bufferPtr$[ebp]
  00de9	0f be 48 02	 movsx	 ecx, BYTE PTR [eax+2]
  00ded	83 f9 31	 cmp	 ecx, 49			; 00000031H
  00df0	75 1c		 jne	 SHORT $L19368
; Line 627
  00df2	68 00 00 00 00	 push	 OFFSET FLAT:_IP
  00df7	68 00 00 00 00	 push	 OFFSET FLAT:$SG19369
  00dfc	e8 00 00 00 00	 call	 _printf
  00e01	83 c4 08	 add	 esp, 8
; Line 628
  00e04	b8 c9 00 00 00	 mov	 eax, 201		; 000000c9H
  00e09	e9 29 01 00 00	 jmp	 $L19361
$L19368:
; Line 630
  00e0e	8b 55 fc	 mov	 edx, DWORD PTR _bufferPtr$[ebp]
  00e11	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00e14	83 f8 32	 cmp	 eax, 50			; 00000032H
  00e17	75 22		 jne	 SHORT $L19371
  00e19	8b 4d fc	 mov	 ecx, DWORD PTR _bufferPtr$[ebp]
  00e1c	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  00e20	83 fa 30	 cmp	 edx, 48			; 00000030H
  00e23	75 16		 jne	 SHORT $L19371
  00e25	8b 45 fc	 mov	 eax, DWORD PTR _bufferPtr$[ebp]
  00e28	0f be 48 02	 movsx	 ecx, BYTE PTR [eax+2]
  00e2c	83 f9 32	 cmp	 ecx, 50			; 00000032H
  00e2f	75 0a		 jne	 SHORT $L19371
; Line 633
  00e31	b8 2d 01 00 00	 mov	 eax, 301		; 0000012dH
  00e36	e9 fc 00 00 00	 jmp	 $L19361
$L19371:
; Line 635
  00e3b	8b 55 fc	 mov	 edx, DWORD PTR _bufferPtr$[ebp]
  00e3e	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00e41	83 f8 32	 cmp	 eax, 50			; 00000032H
  00e44	75 20		 jne	 SHORT $L19373
  00e46	8b 4d fc	 mov	 ecx, DWORD PTR _bufferPtr$[ebp]
  00e49	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  00e4d	83 fa 30	 cmp	 edx, 48			; 00000030H
  00e50	75 14		 jne	 SHORT $L19373
  00e52	8b 45 fc	 mov	 eax, DWORD PTR _bufferPtr$[ebp]
  00e55	0f be 48 02	 movsx	 ecx, BYTE PTR [eax+2]
  00e59	83 f9 33	 cmp	 ecx, 51			; 00000033H
  00e5c	75 08		 jne	 SHORT $L19373
; Line 638
  00e5e	83 c8 ff	 or	 eax, -1
  00e61	e9 d1 00 00 00	 jmp	 $L19361
$L19373:
; Line 640
  00e66	8b 55 fc	 mov	 edx, DWORD PTR _bufferPtr$[ebp]
  00e69	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00e6c	83 f8 32	 cmp	 eax, 50			; 00000032H
  00e6f	75 31		 jne	 SHORT $L19375
  00e71	8b 4d fc	 mov	 ecx, DWORD PTR _bufferPtr$[ebp]
  00e74	0f be 51 01	 movsx	 edx, BYTE PTR [ecx+1]
  00e78	83 fa 30	 cmp	 edx, 48			; 00000030H
  00e7b	75 25		 jne	 SHORT $L19375
  00e7d	8b 45 fc	 mov	 eax, DWORD PTR _bufferPtr$[ebp]
  00e80	0f be 48 02	 movsx	 ecx, BYTE PTR [eax+2]
  00e84	83 f9 34	 cmp	 ecx, 52			; 00000034H
  00e87	75 19		 jne	 SHORT $L19375
; Line 643
  00e89	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _fileNumber
  00e8f	83 c2 01	 add	 edx, 1
  00e92	89 15 00 00 00
	00		 mov	 DWORD PTR _fileNumber, edx
; Line 644
  00e98	b8 c9 00 00 00	 mov	 eax, 201		; 000000c9H
  00e9d	e9 95 00 00 00	 jmp	 $L19361
$L19375:
; Line 646
  00ea2	8b 45 fc	 mov	 eax, DWORD PTR _bufferPtr$[ebp]
  00ea5	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00ea8	83 f9 33	 cmp	 ecx, 51			; 00000033H
  00eab	75 1d		 jne	 SHORT $L19377
  00ead	8b 55 fc	 mov	 edx, DWORD PTR _bufferPtr$[ebp]
  00eb0	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  00eb4	83 f8 30	 cmp	 eax, 48			; 00000030H
  00eb7	75 11		 jne	 SHORT $L19377
  00eb9	8b 4d fc	 mov	 ecx, DWORD PTR _bufferPtr$[ebp]
  00ebc	0f be 51 02	 movsx	 edx, BYTE PTR [ecx+2]
  00ec0	83 fa 32	 cmp	 edx, 50			; 00000032H
  00ec3	75 05		 jne	 SHORT $L19377
; Line 651
  00ec5	83 c8 ff	 or	 eax, -1
  00ec8	eb 6d		 jmp	 SHORT $L19361
$L19377:
; Line 654
  00eca	8b 45 fc	 mov	 eax, DWORD PTR _bufferPtr$[ebp]
  00ecd	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00ed0	83 f9 33	 cmp	 ecx, 51			; 00000033H
  00ed3	75 2c		 jne	 SHORT $L19379
  00ed5	8b 55 fc	 mov	 edx, DWORD PTR _bufferPtr$[ebp]
  00ed8	0f be 42 01	 movsx	 eax, BYTE PTR [edx+1]
  00edc	83 f8 30	 cmp	 eax, 48			; 00000030H
  00edf	75 20		 jne	 SHORT $L19379
  00ee1	8b 4d fc	 mov	 ecx, DWORD PTR _bufferPtr$[ebp]
  00ee4	0f be 51 02	 movsx	 edx, BYTE PTR [ecx+2]
  00ee8	83 fa 34	 cmp	 edx, 52			; 00000034H
  00eeb	75 14		 jne	 SHORT $L19379
; Line 656
  00eed	a1 00 00 00 00	 mov	 eax, DWORD PTR _fileNumber
  00ef2	83 c0 01	 add	 eax, 1
  00ef5	a3 00 00 00 00	 mov	 DWORD PTR _fileNumber, eax
; Line 658
  00efa	b8 c9 00 00 00	 mov	 eax, 201		; 000000c9H
  00eff	eb 36		 jmp	 SHORT $L19361
$L19379:
; Line 660
  00f01	8b 4d fc	 mov	 ecx, DWORD PTR _bufferPtr$[ebp]
  00f04	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00f07	83 fa 31	 cmp	 edx, 49			; 00000031H
  00f0a	75 24		 jne	 SHORT $L19381
  00f0c	8b 45 fc	 mov	 eax, DWORD PTR _bufferPtr$[ebp]
  00f0f	0f be 48 01	 movsx	 ecx, BYTE PTR [eax+1]
  00f13	83 f9 30	 cmp	 ecx, 48			; 00000030H
  00f16	75 18		 jne	 SHORT $L19381
  00f18	8b 55 fc	 mov	 edx, DWORD PTR _bufferPtr$[ebp]
  00f1b	0f be 42 02	 movsx	 eax, BYTE PTR [edx+2]
  00f1f	83 f8 34	 cmp	 eax, 52			; 00000034H
  00f22	75 0c		 jne	 SHORT $L19381
; Line 662
  00f24	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _IP, 0
; Line 664
  00f2b	83 c8 ff	 or	 eax, -1
  00f2e	eb 07		 jmp	 SHORT $L19361
$L19381:
; Line 667
  00f30	83 c8 ff	 or	 eax, -1
  00f33	eb 02		 jmp	 SHORT $L19361
$L19367:
; Line 669
  00f35	33 c0		 xor	 eax, eax
$L19361:
; Line 670
  00f37	8b e5		 mov	 esp, ebp
  00f39	5d		 pop	 ebp
  00f3a	c3		 ret	 0
_Protocol ENDP
_TEXT	ENDS
EXTRN	_strlen:NEAR
EXTRN	_fscanf:NEAR
_BSS	SEGMENT
$SG19391 DB	02H DUP (?)
	ALIGN	4

$SG19399 DB	02H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
	ORG $+3
$SG19389 DB	'..\wwwt\', 00H
	ORG $+3
$SG19393 DB	'index.txt', 00H
	ORG $+2
$SG19400 DB	0aH, '----------------------------------Starting File Tra'
	DB	'nsfer------------------------------', 00H
$SG19401 DB	'rb', 00H
	ORG $+1
$SG19404 DB	0aH, 'Error: No Index File in this path %s', 00H
	ORG $+2
$SG19408 DB	'%s', 00H
	ORG $+1
$SG19411 DB	'..\wwwt\', 00H
	ORG $+3
$SG19412 DB	'rb', 00H
	ORG $+1
$SG19415 DB	0aH, 'Error: Cannot open File: %s', 00H
	ORG $+3
$SG19418 DB	0aH, 'Total Files in Index =%d', 00H
	ORG $+2
$SG19419 DB	0aH, 'FileNo.', 09H, 'FileSize', 09H, 09H, 'FileName', 00H
$SG19423 DB	'..\wwwt\', 00H
	ORG $+3
$SG19424 DB	'rb', 00H
	ORG $+1
$SG19427 DB	0aH, 'Error: Cannot open File: %s', 00H
	ORG $+3
$SG19431 DB	0aH, '%d .', 00H
	ORG $+2
$SG19432 DB	09H, '%ld', 00H
	ORG $+3
$SG19433 DB	09H, 09H, '%s', 00H
	ORG $+3
$SG19434 DB	0aH, 'Index Created', 00H
	ORG $+1
$SG19435 DB	0aH, 'Ready to accept transfer', 00H
_DATA	ENDS
_TEXT	SEGMENT
_myDisk$ = -884
_myFile$ = -896
_Buffer$ = -776
_Path$ = -880
_Path2$ = -264
_indexFile$ = -892
_Size$ = -84
_i$ = -888
_Index$ = -780
_fSize$ = -900
_fileName$ = -80
_Init	PROC NEAR
; Line 673
  00f3b	55		 push	 ebp
  00f3c	8b ec		 mov	 ebp, esp
  00f3e	81 ec 84 03 00
	00		 sub	 esp, 900		; 00000384H
  00f44	57		 push	 edi
; Line 677
  00f45	a1 00 00 00 00	 mov	 eax, DWORD PTR $SG19389
  00f4a	89 85 90 fc ff
	ff		 mov	 DWORD PTR _Path$[ebp], eax
  00f50	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR $SG19389+4
  00f56	89 8d 94 fc ff
	ff		 mov	 DWORD PTR _Path$[ebp+4], ecx
  00f5c	8a 15 08 00 00
	00		 mov	 dl, BYTE PTR $SG19389+8
  00f62	88 95 98 fc ff
	ff		 mov	 BYTE PTR _Path$[ebp+8], dl
  00f68	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00f6d	33 c0		 xor	 eax, eax
  00f6f	8d bd 99 fc ff
	ff		 lea	 edi, DWORD PTR _Path$[ebp+9]
  00f75	f3 ab		 rep stosd
  00f77	66 ab		 stosw
  00f79	aa		 stosb
; Line 678
  00f7a	66 a1 00 00 00
	00		 mov	 ax, WORD PTR $SG19391
  00f80	66 89 85 f8 fe
	ff ff		 mov	 WORD PTR _Path2$[ebp], ax
  00f87	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00f8c	33 c0		 xor	 eax, eax
  00f8e	8d bd fa fe ff
	ff		 lea	 edi, DWORD PTR _Path2$[ebp+2]
  00f94	f3 ab		 rep stosd
  00f96	66 ab		 stosw
; Line 679
  00f98	c7 85 84 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _indexFile$[ebp], OFFSET FLAT:$SG19393
; Line 680
  00fa2	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _Size$[ebp], 0
  00fa9	c7 85 88 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  00fb3	c7 85 f4 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _Index$[ebp], 0
; Line 681
  00fbd	c7 85 7c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _fSize$[ebp], 0
; Line 682
  00fc7	66 8b 0d 00 00
	00 00		 mov	 cx, WORD PTR $SG19399
  00fce	66 89 4d b0	 mov	 WORD PTR _fileName$[ebp], cx
  00fd2	b9 13 00 00 00	 mov	 ecx, 19			; 00000013H
  00fd7	33 c0		 xor	 eax, eax
  00fd9	8d 7d b2	 lea	 edi, DWORD PTR _fileName$[ebp+2]
  00fdc	f3 ab		 rep stosd
  00fde	66 ab		 stosw
; Line 683
  00fe0	c6 85 f8 fc ff
	ff 00		 mov	 BYTE PTR _Buffer$[ebp], 0
; Line 684
  00fe7	68 00 00 00 00	 push	 OFFSET FLAT:$SG19400
  00fec	e8 00 00 00 00	 call	 _printf
  00ff1	83 c4 04	 add	 esp, 4
; Line 686
  00ff4	8b 95 84 fc ff
	ff		 mov	 edx, DWORD PTR _indexFile$[ebp]
  00ffa	52		 push	 edx
  00ffb	8d 85 90 fc ff
	ff		 lea	 eax, DWORD PTR _Path$[ebp]
  01001	50		 push	 eax
  01002	e8 00 00 00 00	 call	 _strcat
  01007	83 c4 08	 add	 esp, 8
; Line 690
  0100a	68 00 00 00 00	 push	 OFFSET FLAT:$SG19401
  0100f	8d 8d 90 fc ff
	ff		 lea	 ecx, DWORD PTR _Path$[ebp]
  01015	51		 push	 ecx
  01016	e8 00 00 00 00	 call	 _fopen
  0101b	83 c4 08	 add	 esp, 8
  0101e	89 85 8c fc ff
	ff		 mov	 DWORD PTR _myDisk$[ebp], eax
; Line 692
  01024	83 bd 8c fc ff
	ff 00		 cmp	 DWORD PTR _myDisk$[ebp], 0
  0102b	75 1c		 jne	 SHORT $L19403
; Line 694
  0102d	8d 95 90 fc ff
	ff		 lea	 edx, DWORD PTR _Path$[ebp]
  01033	52		 push	 edx
  01034	68 00 00 00 00	 push	 OFFSET FLAT:$SG19404
  01039	e8 00 00 00 00	 call	 _printf
  0103e	83 c4 08	 add	 esp, 8
; Line 695
  01041	83 c8 ff	 or	 eax, -1
  01044	e9 c2 02 00 00	 jmp	 $L19384
$L19403:
; Line 701
  01049	b8 01 00 00 00	 mov	 eax, 1
  0104e	85 c0		 test	 eax, eax
  01050	0f 84 ef 00 00
	00		 je	 $L19407
; Line 703
  01056	8d 4d b0	 lea	 ecx, DWORD PTR _fileName$[ebp]
  01059	51		 push	 ecx
  0105a	68 00 00 00 00	 push	 OFFSET FLAT:$SG19408
  0105f	8b 95 8c fc ff
	ff		 mov	 edx, DWORD PTR _myDisk$[ebp]
  01065	52		 push	 edx
  01066	e8 00 00 00 00	 call	 _fscanf
  0106b	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 713
  0106e	0f be 45 b0	 movsx	 eax, BYTE PTR _fileName$[ebp]
  01072	83 f8 78	 cmp	 eax, 120		; 00000078H
  01075	75 17		 jne	 SHORT $L19409
  01077	0f be 4d b1	 movsx	 ecx, BYTE PTR _fileName$[ebp+1]
  0107b	83 f9 79	 cmp	 ecx, 121		; 00000079H
  0107e	75 0e		 jne	 SHORT $L19409
  01080	0f be 55 b2	 movsx	 edx, BYTE PTR _fileName$[ebp+2]
  01084	83 fa 7a	 cmp	 edx, 122		; 0000007aH
  01087	75 05		 jne	 SHORT $L19409
; Line 715
  01089	e9 b7 00 00 00	 jmp	 $L19407
$L19409:
; Line 720
  0108e	68 00 00 00 00	 push	 OFFSET FLAT:$SG19411
  01093	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _Path2$[ebp]
  01099	50		 push	 eax
  0109a	e8 00 00 00 00	 call	 _strcpy
  0109f	83 c4 08	 add	 esp, 8
; Line 721
  010a2	8d 4d b0	 lea	 ecx, DWORD PTR _fileName$[ebp]
  010a5	51		 push	 ecx
  010a6	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _Path2$[ebp]
  010ac	52		 push	 edx
  010ad	e8 00 00 00 00	 call	 _strcat
  010b2	83 c4 08	 add	 esp, 8
; Line 722
  010b5	68 00 00 00 00	 push	 OFFSET FLAT:$SG19412
  010ba	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _Path2$[ebp]
  010c0	50		 push	 eax
  010c1	e8 00 00 00 00	 call	 _fopen
  010c6	83 c4 08	 add	 esp, 8
  010c9	89 85 80 fc ff
	ff		 mov	 DWORD PTR _myFile$[ebp], eax
; Line 723
  010cf	83 bd 80 fc ff
	ff 00		 cmp	 DWORD PTR _myFile$[ebp], 0
  010d6	75 19		 jne	 SHORT $L19414
; Line 725
  010d8	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _Path2$[ebp]
  010de	51		 push	 ecx
  010df	68 00 00 00 00	 push	 OFFSET FLAT:$SG19415
  010e4	e8 00 00 00 00	 call	 _printf
  010e9	83 c4 08	 add	 esp, 8
; Line 726
  010ec	e9 58 ff ff ff	 jmp	 $L19403
$L19414:
; Line 730
  010f1	8d 55 b0	 lea	 edx, DWORD PTR _fileName$[ebp]
  010f4	52		 push	 edx
  010f5	8b 85 88 fc ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  010fb	6b c0 54	 imul	 eax, 84			; 00000054H
  010fe	05 00 00 00 00	 add	 eax, OFFSET FLAT:_File
  01103	50		 push	 eax
  01104	e8 00 00 00 00	 call	 _strcpy
  01109	83 c4 08	 add	 esp, 8
; Line 731
  0110c	8b 8d 80 fc ff
	ff		 mov	 ecx, DWORD PTR _myFile$[ebp]
  01112	51		 push	 ecx
  01113	e8 00 00 00 00	 call	 _fclose
  01118	83 c4 04	 add	 esp, 4
; Line 732
  0111b	8b 95 88 fc ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  01121	83 c2 01	 add	 edx, 1
  01124	89 95 88 fc ff
	ff		 mov	 DWORD PTR _i$[ebp], edx
; Line 738
  0112a	8d 45 b0	 lea	 eax, DWORD PTR _fileName$[ebp]
  0112d	50		 push	 eax
  0112e	e8 00 00 00 00	 call	 _strlen
  01133	83 c4 04	 add	 esp, 4
  01136	83 f8 50	 cmp	 eax, 80			; 00000050H
  01139	72 05		 jb	 SHORT $L19417
; Line 740
  0113b	e9 09 ff ff ff	 jmp	 $L19403
$L19417:
; Line 744
  01140	e9 04 ff ff ff	 jmp	 $L19403
$L19407:
; Line 746
  01145	8b 8d 8c fc ff
	ff		 mov	 ecx, DWORD PTR _myDisk$[ebp]
  0114b	51		 push	 ecx
  0114c	e8 00 00 00 00	 call	 _fclose
  01151	83 c4 04	 add	 esp, 4
; Line 747
  01154	8b 95 88 fc ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  0115a	52		 push	 edx
  0115b	68 00 00 00 00	 push	 OFFSET FLAT:$SG19418
  01160	e8 00 00 00 00	 call	 _printf
  01165	83 c4 08	 add	 esp, 8
; Line 748
  01168	68 00 00 00 00	 push	 OFFSET FLAT:$SG19419
  0116d	e8 00 00 00 00	 call	 _printf
  01172	83 c4 04	 add	 esp, 4
$L19421:
; Line 750
  01175	8b 85 88 fc ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  0117b	83 e8 01	 sub	 eax, 1
  0117e	39 85 f4 fc ff
	ff		 cmp	 DWORD PTR _Index$[ebp], eax
  01184	0f 8f 59 01 00
	00		 jg	 $L19422
; Line 753
  0118a	68 00 00 00 00	 push	 OFFSET FLAT:$SG19423
  0118f	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _Path2$[ebp]
  01195	51		 push	 ecx
  01196	e8 00 00 00 00	 call	 _strcpy
  0119b	83 c4 08	 add	 esp, 8
; Line 755
  0119e	8b 95 f4 fc ff
	ff		 mov	 edx, DWORD PTR _Index$[ebp]
  011a4	6b d2 54	 imul	 edx, 84			; 00000054H
  011a7	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:_File
  011ad	52		 push	 edx
  011ae	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _Path2$[ebp]
  011b4	50		 push	 eax
  011b5	e8 00 00 00 00	 call	 _strcat
  011ba	83 c4 08	 add	 esp, 8
; Line 757
  011bd	68 00 00 00 00	 push	 OFFSET FLAT:$SG19424
  011c2	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _Path2$[ebp]
  011c8	51		 push	 ecx
  011c9	e8 00 00 00 00	 call	 _fopen
  011ce	83 c4 08	 add	 esp, 8
  011d1	89 85 80 fc ff
	ff		 mov	 DWORD PTR _myFile$[ebp], eax
; Line 759
  011d7	83 bd 80 fc ff
	ff 00		 cmp	 DWORD PTR _myFile$[ebp], 0
  011de	75 28		 jne	 SHORT $L19426
; Line 761
  011e0	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _Path2$[ebp]
  011e6	52		 push	 edx
  011e7	68 00 00 00 00	 push	 OFFSET FLAT:$SG19427
  011ec	e8 00 00 00 00	 call	 _printf
  011f1	83 c4 08	 add	 esp, 8
; Line 762
  011f4	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _Index$[ebp]
  011fa	83 c0 01	 add	 eax, 1
  011fd	89 85 f4 fc ff
	ff		 mov	 DWORD PTR _Index$[ebp], eax
; Line 763
  01203	e9 6d ff ff ff	 jmp	 $L19421
$L19426:
; Line 766
  01208	6a 00		 push	 0
  0120a	6a 00		 push	 0
  0120c	8b 8d 80 fc ff
	ff		 mov	 ecx, DWORD PTR _myFile$[ebp]
  01212	51		 push	 ecx
  01213	e8 00 00 00 00	 call	 _fseek
  01218	83 c4 0c	 add	 esp, 12			; 0000000cH
$L19428:
; Line 769
  0121b	8b 95 80 fc ff
	ff		 mov	 edx, DWORD PTR _myFile$[ebp]
  01221	52		 push	 edx
  01222	68 00 02 00 00	 push	 512			; 00000200H
  01227	6a 01		 push	 1
  01229	8d 85 f8 fc ff
	ff		 lea	 eax, DWORD PTR _Buffer$[ebp]
  0122f	50		 push	 eax
  01230	e8 00 00 00 00	 call	 _fread
  01235	83 c4 10	 add	 esp, 16			; 00000010H
  01238	89 45 ac	 mov	 DWORD PTR _Size$[ebp], eax
; Line 770
  0123b	8b 8d 7c fc ff
	ff		 mov	 ecx, DWORD PTR _fSize$[ebp]
  01241	03 4d ac	 add	 ecx, DWORD PTR _Size$[ebp]
  01244	89 8d 7c fc ff
	ff		 mov	 DWORD PTR _fSize$[ebp], ecx
; Line 771
  0124a	81 7d ac 00 02
	00 00		 cmp	 DWORD PTR _Size$[ebp], 512 ; 00000200H
  01251	74 c8		 je	 SHORT $L19428
; Line 773
  01253	8b 95 f4 fc ff
	ff		 mov	 edx, DWORD PTR _Index$[ebp]
  01259	6b d2 54	 imul	 edx, 84			; 00000054H
  0125c	8b 85 7c fc ff
	ff		 mov	 eax, DWORD PTR _fSize$[ebp]
  01262	89 82 50 00 00
	00		 mov	 DWORD PTR _File[edx+80], eax
; Line 774
  01268	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _Index$[ebp]
  0126e	51		 push	 ecx
  0126f	68 00 00 00 00	 push	 OFFSET FLAT:$SG19431
  01274	e8 00 00 00 00	 call	 _printf
  01279	83 c4 08	 add	 esp, 8
; Line 775
  0127c	8b 95 f4 fc ff
	ff		 mov	 edx, DWORD PTR _Index$[ebp]
  01282	6b d2 54	 imul	 edx, 84			; 00000054H
  01285	8b 82 50 00 00
	00		 mov	 eax, DWORD PTR _File[edx+80]
  0128b	50		 push	 eax
  0128c	68 00 00 00 00	 push	 OFFSET FLAT:$SG19432
  01291	e8 00 00 00 00	 call	 _printf
  01296	83 c4 08	 add	 esp, 8
; Line 776
  01299	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _Index$[ebp]
  0129f	6b c9 54	 imul	 ecx, 84			; 00000054H
  012a2	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:_File
  012a8	51		 push	 ecx
  012a9	68 00 00 00 00	 push	 OFFSET FLAT:$SG19433
  012ae	e8 00 00 00 00	 call	 _printf
  012b3	83 c4 08	 add	 esp, 8
; Line 777
  012b6	c7 85 7c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _fSize$[ebp], 0
; Line 778
  012c0	8b 95 80 fc ff
	ff		 mov	 edx, DWORD PTR _myFile$[ebp]
  012c6	52		 push	 edx
  012c7	e8 00 00 00 00	 call	 _fclose
  012cc	83 c4 04	 add	 esp, 4
; Line 779
  012cf	8b 85 f4 fc ff
	ff		 mov	 eax, DWORD PTR _Index$[ebp]
  012d5	83 c0 01	 add	 eax, 1
  012d8	89 85 f4 fc ff
	ff		 mov	 DWORD PTR _Index$[ebp], eax
; Line 781
  012de	e9 92 fe ff ff	 jmp	 $L19421
$L19422:
; Line 782
  012e3	8b 8d f4 fc ff
	ff		 mov	 ecx, DWORD PTR _Index$[ebp]
  012e9	89 0d 00 00 00
	00		 mov	 DWORD PTR _totalFiles, ecx
; Line 783
  012ef	68 00 00 00 00	 push	 OFFSET FLAT:$SG19434
  012f4	e8 00 00 00 00	 call	 _printf
  012f9	83 c4 04	 add	 esp, 4
; Line 784
  012fc	68 00 00 00 00	 push	 OFFSET FLAT:$SG19435
  01301	e8 00 00 00 00	 call	 _printf
  01306	83 c4 04	 add	 esp, 4
; Line 787
  01309	33 c0		 xor	 eax, eax
$L19384:
; Line 789
  0130b	5f		 pop	 edi
  0130c	8b e5		 mov	 esp, ebp
  0130e	5d		 pop	 ebp
  0130f	c3		 ret	 0
_Init	ENDP
_sendBuffer$ = 8
_Create102 PROC NEAR
; Line 792
  01310	55		 push	 ebp
  01311	8b ec		 mov	 ebp, esp
; Line 794
  01313	8b 45 08	 mov	 eax, DWORD PTR _sendBuffer$[ebp]
  01316	c6 00 31	 mov	 BYTE PTR [eax], 49	; 00000031H
; Line 795
  01319	8b 4d 08	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  0131c	c6 41 01 30	 mov	 BYTE PTR [ecx+1], 48	; 00000030H
; Line 796
  01320	8b 55 08	 mov	 edx, DWORD PTR _sendBuffer$[ebp]
  01323	c6 42 02 32	 mov	 BYTE PTR [edx+2], 50	; 00000032H
; Line 797
  01327	8b 45 08	 mov	 eax, DWORD PTR _sendBuffer$[ebp]
  0132a	c6 40 03 10	 mov	 BYTE PTR [eax+3], 16	; 00000010H
; Line 798
  0132e	8b 4d 08	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  01331	c6 41 04 13	 mov	 BYTE PTR [ecx+4], 19	; 00000013H
; Line 799
  01335	33 c0		 xor	 eax, eax
; Line 802
  01337	5d		 pop	 ebp
  01338	c3		 ret	 0
_Create102 ENDP
_TEXT	ENDS
_DATA	SEGMENT
	ORG $+2
$SG19454 DB	0aH, 'Sending.....', 00H
	ORG $+2
$SG19455 DB	'%d.', 00H
$SG19456 DB	09H, '%ld', 00H
	ORG $+3
$SG19457 DB	09H, 09H, '%s', 00H
_DATA	ENDS
_TEXT	SEGMENT
_fileNumber$ = 8
_sendBuffer$ = 12
_fileNameSize$ = -8
_padLength$ = -28
_j$ = -24
_Padding$ = -16
_padStart$ = -20
_fsize$ = -4
_Create201 PROC NEAR
; Line 805
  01339	55		 push	 ebp
  0133a	8b ec		 mov	 ebp, esp
  0133c	83 ec 1c	 sub	 esp, 28			; 0000001cH
; Line 806
  0133f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _fileNameSize$[ebp], 0
; Line 807
  01346	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _padLength$[ebp], 0
; Line 809
  0134d	c6 45 f0 00	 mov	 BYTE PTR _Padding$[ebp], 0
; Line 810
  01351	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _padStart$[ebp], 0
; Line 815
  01358	8b 45 0c	 mov	 eax, DWORD PTR _sendBuffer$[ebp]
  0135b	c6 00 32	 mov	 BYTE PTR [eax], 50	; 00000032H
; Line 816
  0135e	8b 4d 0c	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  01361	c6 41 01 30	 mov	 BYTE PTR [ecx+1], 48	; 00000030H
; Line 817
  01365	8b 55 0c	 mov	 edx, DWORD PTR _sendBuffer$[ebp]
  01368	c6 42 02 31	 mov	 BYTE PTR [edx+2], 49	; 00000031H
; Line 820
  0136c	8b 45 0c	 mov	 eax, DWORD PTR _sendBuffer$[ebp]
  0136f	c6 40 03 10	 mov	 BYTE PTR [eax+3], 16	; 00000010H
; Line 821
  01373	8b 4d 0c	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  01376	c6 41 04 13	 mov	 BYTE PTR [ecx+4], 19	; 00000013H
; Line 824
  0137a	8b 55 08	 mov	 edx, DWORD PTR _fileNumber$[ebp]
  0137d	6b d2 54	 imul	 edx, 84			; 00000054H
  01380	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:_File
  01386	52		 push	 edx
  01387	8b 45 0c	 mov	 eax, DWORD PTR _sendBuffer$[ebp]
  0138a	83 c0 05	 add	 eax, 5
  0138d	50		 push	 eax
  0138e	e8 00 00 00 00	 call	 _strcpy
  01393	83 c4 08	 add	 esp, 8
; Line 826
  01396	8b 4d 08	 mov	 ecx, DWORD PTR _fileNumber$[ebp]
  01399	6b c9 54	 imul	 ecx, 84			; 00000054H
  0139c	81 c1 00 00 00
	00		 add	 ecx, OFFSET FLAT:_File
  013a2	51		 push	 ecx
  013a3	e8 00 00 00 00	 call	 _strlen
  013a8	83 c4 04	 add	 esp, 4
  013ab	89 45 f8	 mov	 DWORD PTR _fileNameSize$[ebp], eax
; Line 827
  013ae	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  013b3	2b 55 f8	 sub	 edx, DWORD PTR _fileNameSize$[ebp]
  013b6	89 55 e4	 mov	 DWORD PTR _padLength$[ebp], edx
; Line 828
  013b9	8b 45 f8	 mov	 eax, DWORD PTR _fileNameSize$[ebp]
  013bc	83 c0 06	 add	 eax, 6
  013bf	89 45 ec	 mov	 DWORD PTR _padStart$[ebp], eax
; Line 829
  013c2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  013c9	eb 09		 jmp	 SHORT $L19451
$L19452:
  013cb	8b 4d e8	 mov	 ecx, DWORD PTR _j$[ebp]
  013ce	83 c1 01	 add	 ecx, 1
  013d1	89 4d e8	 mov	 DWORD PTR _j$[ebp], ecx
$L19451:
  013d4	8b 55 e8	 mov	 edx, DWORD PTR _j$[ebp]
  013d7	3b 55 e4	 cmp	 edx, DWORD PTR _padLength$[ebp]
  013da	7f 16		 jg	 SHORT $L19453
; Line 831
  013dc	8b 45 0c	 mov	 eax, DWORD PTR _sendBuffer$[ebp]
  013df	03 45 ec	 add	 eax, DWORD PTR _padStart$[ebp]
  013e2	8a 4d f0	 mov	 cl, BYTE PTR _Padding$[ebp]
  013e5	88 08		 mov	 BYTE PTR [eax], cl
; Line 832
  013e7	8b 55 ec	 mov	 edx, DWORD PTR _padStart$[ebp]
  013ea	83 c2 01	 add	 edx, 1
  013ed	89 55 ec	 mov	 DWORD PTR _padStart$[ebp], edx
; Line 833
  013f0	eb d9		 jmp	 SHORT $L19452
$L19453:
; Line 835
  013f2	8b 45 0c	 mov	 eax, DWORD PTR _sendBuffer$[ebp]
  013f5	c6 40 55 10	 mov	 BYTE PTR [eax+85], 16	; 00000010H
; Line 836
  013f9	8b 4d 0c	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  013fc	c6 41 56 13	 mov	 BYTE PTR [ecx+86], 19	; 00000013H
; Line 840
  01400	68 00 00 00 00	 push	 OFFSET FLAT:$SG19454
  01405	e8 00 00 00 00	 call	 _printf
  0140a	83 c4 04	 add	 esp, 4
; Line 841
  0140d	8b 55 08	 mov	 edx, DWORD PTR _fileNumber$[ebp]
  01410	52		 push	 edx
  01411	68 00 00 00 00	 push	 OFFSET FLAT:$SG19455
  01416	e8 00 00 00 00	 call	 _printf
  0141b	83 c4 08	 add	 esp, 8
; Line 842
  0141e	8b 45 08	 mov	 eax, DWORD PTR _fileNumber$[ebp]
  01421	6b c0 54	 imul	 eax, 84			; 00000054H
  01424	8b 88 50 00 00
	00		 mov	 ecx, DWORD PTR _File[eax+80]
  0142a	51		 push	 ecx
  0142b	68 00 00 00 00	 push	 OFFSET FLAT:$SG19456
  01430	e8 00 00 00 00	 call	 _printf
  01435	83 c4 08	 add	 esp, 8
; Line 843
  01438	8b 55 08	 mov	 edx, DWORD PTR _fileNumber$[ebp]
  0143b	6b d2 54	 imul	 edx, 84			; 00000054H
  0143e	81 c2 00 00 00
	00		 add	 edx, OFFSET FLAT:_File
  01444	52		 push	 edx
  01445	68 00 00 00 00	 push	 OFFSET FLAT:$SG19457
  0144a	e8 00 00 00 00	 call	 _printf
  0144f	83 c4 08	 add	 esp, 8
; Line 846
  01452	8b 45 08	 mov	 eax, DWORD PTR _fileNumber$[ebp]
  01455	6b c0 54	 imul	 eax, 84			; 00000054H
  01458	05 50 00 00 00	 add	 eax, OFFSET FLAT:_File+80
  0145d	89 45 fc	 mov	 DWORD PTR _fsize$[ebp], eax
; Line 848
  01460	8b 4d 0c	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  01463	8b 55 fc	 mov	 edx, DWORD PTR _fsize$[ebp]
  01466	8a 02		 mov	 al, BYTE PTR [edx]
  01468	88 41 57	 mov	 BYTE PTR [ecx+87], al
; Line 849
  0146b	8b 4d 0c	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  0146e	8b 55 fc	 mov	 edx, DWORD PTR _fsize$[ebp]
  01471	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  01474	88 41 58	 mov	 BYTE PTR [ecx+88], al
; Line 850
  01477	8b 4d 0c	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  0147a	8b 55 fc	 mov	 edx, DWORD PTR _fsize$[ebp]
  0147d	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  01480	88 41 59	 mov	 BYTE PTR [ecx+89], al
; Line 851
  01483	8b 4d 0c	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  01486	8b 55 fc	 mov	 edx, DWORD PTR _fsize$[ebp]
  01489	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0148c	88 41 5a	 mov	 BYTE PTR [ecx+90], al
; Line 852
  0148f	33 c0		 xor	 eax, eax
; Line 854
  01491	8b e5		 mov	 esp, ebp
  01493	5d		 pop	 ebp
  01494	c3		 ret	 0
_Create201 ENDP
_TEXT	ENDS
PUBLIC	_Create301
_TEXT	SEGMENT
_sendBuffer$ = 12
_Create301 PROC NEAR
; Line 857
  01495	55		 push	 ebp
  01496	8b ec		 mov	 ebp, esp
  01498	51		 push	 ecx
; Line 863
  01499	8b 45 0c	 mov	 eax, DWORD PTR _sendBuffer$[ebp]
  0149c	c6 00 33	 mov	 BYTE PTR [eax], 51	; 00000033H
; Line 864
  0149f	8b 4d 0c	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  014a2	c6 41 01 30	 mov	 BYTE PTR [ecx+1], 48	; 00000030H
; Line 865
  014a6	8b 55 0c	 mov	 edx, DWORD PTR _sendBuffer$[ebp]
  014a9	c6 42 02 31	 mov	 BYTE PTR [edx+2], 49	; 00000031H
; Line 868
  014ad	8b 45 0c	 mov	 eax, DWORD PTR _sendBuffer$[ebp]
  014b0	c6 40 03 10	 mov	 BYTE PTR [eax+3], 16	; 00000010H
; Line 869
  014b4	8b 4d 0c	 mov	 ecx, DWORD PTR _sendBuffer$[ebp]
  014b7	c6 41 04 13	 mov	 BYTE PTR [ecx+4], 19	; 00000013H
; Line 874
  014bb	33 c0		 xor	 eax, eax
; Line 876
  014bd	8b e5		 mov	 esp, ebp
  014bf	5d		 pop	 ebp
  014c0	c3		 ret	 0
_Create301 ENDP
_TEXT	ENDS
END
