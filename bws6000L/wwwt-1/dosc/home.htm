<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>New Page 2</title>
<style>
<!--
 p.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
 li.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
div.Section1
	{page:Section1;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Arial Unicode MS";
	font-weight:bold}
span.SpellE
	{}
 div.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:Sabon;
	margin-left:0in; margin-right:0in; margin-top:0in}
-->
</style>
</head>

<body>

<p class="MsoNormal" style="text-align:justify">&nbsp;</p>

<p class="MsoNormal" style="TEXT-ALIGN: justify"><font face="Georgia" size="4">
<font color="#ff0000"><u>Bare 
Machine Computing (BMC)</u>: </font>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font face="Arial" color="#0000FF" size="3">When operating system 
layer is avoided, a computer application directly communicates to the hardware 
through a direct hardware interface. This computer application is 
referred to as an application object (AO). As there is no operating system 
running in a machine, and an AO is the sole control of the hardware, the 
necessary operating system related middleware is dispersed into the AO and now 
the AO is a self-contained, self-managed, and self-executed computer 
application. In this paradigm, an AO is a user level application program 
rather than a system level process. That is, there is only one AO running in the 
system, which may consist of many processes or tasks. The user level application 
programs are independent of any system or environments. Some examples of an AO 
include: Web server, Email, VoIP softphone, Editor, Web browser, E-commerce 
transaction on the Web, Web search, Payroll, Text processing, Spreadsheets, and 
so on. An AO can also contain multiple user level applications constituting a 
composite AO. For example, a Communication Explorer (CE) can contain Email, VoIP 
softphone, Web browser, and Web server.&nbsp; </font></p>
<p class="MsoNormal" style="TEXT-ALIGN: justify">&nbsp;</p>
<p class="MsoNormal" style="TEXT-ALIGN: justify">
<font face="Arial" color="#0000FF" size="3">&nbsp;&nbsp;&nbsp;&nbsp; As an AO is self-contained, it 
consists of a program, data, control, boot, load, and other needed interfaces to 
communicate to its hardware. An AO manages its own memory, processes,  
and network interfaces. An AO also schedules its own tasks, handles 
its own exceptions, and leaves the system when execution is complete.&nbsp; Thus, as 
along as the hardware interfaces are preserved, and the underlying computer 
architecture (e.g. Intel X86) remains constant, then this AO has eternal life. 
You write this code once and use it for ever! You can always enhance the 
functionality of an AO to enrich its usage resulting in new AOs; but one can 
still use their old AOs to serve their old purpose. For instance, when one 
writes an AO for an email application, then this AO can be there for ever, and 
there can be only one AO that can be downloaded and used by all users in the 
world! This makes the future information technology &quot;application centric&quot; rather 
than &quot;environment centric&quot; as we have today.</font></p>
<p class="MsoNormal" style="TEXT-ALIGN: justify">&nbsp;</p>
<p class="MsoNormal" style="TEXT-ALIGN: justify">
<font face="Arial" color="#0000FF" size="3">&nbsp;&nbsp;&nbsp; When the BMC becomes a reality, 
it changes the information technology world in many ways. The hardware vendors 
have to extend their hardware interfaces rather than discard and rebuild them. 
The software vendors will be transformed into AO builders and they will be 
polarized on computer applications rather than computing environments. The AO 
builders also have to extend their AOs instead of discard and rebuild them. 
There will be universal AOs that will serve all users in the world as a single 
source for global objects. The Internet service providers can manage and 
distribute AOs and charge fee as a single source of service for users. When AOs 
become global objects, one can build pervasive AOs using the same API for 
hardware and the same processor architecture in pervasive devices. As the focus 
will turn into building AOs, thus eventually all necessary AOs will be captured 
constituting global objects to do global computing. As the AOs are stable over a 
long period of time, or for ever, there is no need to dump hardware and software 
frequently, thus saving tremendous product cost, dumping cost, time for 
retraining, and preserving people's skills. That is, the BMC paradigm will help 
reduce speed of obsolescence and result in a revolutionary paradigm for the 
future computing. </font></p>
<p class="MsoNormal" style="TEXT-ALIGN: justify">
&nbsp;</p>
<p class="MsoNormal" style="TEXT-ALIGN: justify">
<font face="Arial" color="#0000FF">&nbsp;&nbsp;&nbsp; We have successfully 
demonstrated the BMC concept using bare PCs by building complex applications 
including: Web server, Web client, Email server/client, VoIP softphone, VoIP security, Editor, 
and other networking applications. The bare PC applications fit on a single 
floppy or a USB and they can be run on older or newer PCs. These applications are simple 
and written in C++ and Microsoft ASM languages. Currently we are working on 
development of various networking applications and Security 
aspects of bare machine computing. </font></p>

</body>

</html>
