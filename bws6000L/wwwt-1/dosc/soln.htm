<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>New Page 2</title>
<style>
<!--
 p.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
 li.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
div.Section1
	{page:Section1;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Arial Unicode MS";
	font-weight:bold}
span.SpellE
	{}
 div.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:Sabon;
	margin-left:0in; margin-right:0in; margin-top:0in}
-->
</style>
</head>

<body>

<p class="MsoNormal" style="text-align:justify"><font color="#FF0000"><b>
<font face="Georgia" size="4"><u><a name="Solution">Solution</a>:</u></font></b><font face="Verdana" size="2"> </font>
</font></p>
<p class="MsoNormal" style="text-align:justify"><font face="Verdana" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<font color="#800080">The two solutions to such problem are to (1) Live with it, or (2) Get rid off 
    it. We propose the second solution as the first one is already in place. In order to get eliminate OS, we 
    need to avoid four basic functions of OS: sharing of resources, multiplexing resources, 
    abstractions to hardware, and load/boot programs. In the BMC approach all the above problems are avoided by 
    giving the hardware transparency to the AO (application object) programmer. The AO programmer's 
    job is made complicated by combining application and system programming. However, when an AO is 
    written once, it is stable over a long period of time. We believe that the BMC approach will address 
    and solve many problems that exist today including: rapid obsolescence, complexity, instability of 
    software and hardware, and environment driven computing. 
    

<p class="MsoNormal" style="text-align:justify">&nbsp;</p>
<p class="MsoNormal" style="text-align:justify"><u><b>
<font face="Georgia" size="4"> Potential Applications: </font>
</b></u></p>
<p class="MsoNormal" style="text-align:justify">&nbsp;</p>
<p class="MsoNormal" align="justify"><font >There could be many 
potential applications for bare machine computing. If one can carry their 
own application on a flash drive and run it on any bare
machine, it will change the entire spectrum of information technology. We can place bare 
machines (PCs and Laptops for now) at any public places such as airports, 
railway stations, doctors offices, hotel lobbies, tourist centers, and so on. 
These computers do not require any maintenance or constant upgrades due to
operating system releases. Users owning their own USB flash drives can customize their software 
suitable to their needs and just carry on the flash drive with them wherever 
they travel. This provides complete flexibility in computing as they do 
not depend upon any particular computing environment. This reduces throwaway of 
hardware and software and minimizes obsolescence of people's skills. There are 
many other broader impacts of bare machine computing that are yet to be 
discovered and left up to the imagination of the readers! </font></p>
<p class="MsoNormal" align="justify">&nbsp;</p>

</body>

</html>
