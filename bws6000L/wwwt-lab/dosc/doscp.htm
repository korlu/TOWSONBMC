<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>New Page 2</title>
<style>
<!--
 p.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
 li.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
div.Section1
	{page:Section1;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Arial Unicode MS";
	font-weight:bold}
span.SpellE
	{}
 div.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:Sabon;
	margin-left:0in; margin-right:0in; margin-top:0in}
-->
</style>
</head>

<body>

<hr>
<p class="MsoNormal" style="text-align:justify">&nbsp;</p>
<p class="MsoNormal" style="text-align:justify"><font size="4" face="Georgia">
<font color="#FF0000"><u>Bare Machine Computing (BMC)</u>: </font>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font size="3" face="Arial" color="#800080">
Over a long period of time, operating systems (OS) or kernels (micro, mini, nano, tiny, etc..) provided higher 
layers of hardware abstractions to offer a convenient programming platform for the application developers. During 
this time period, hardware became smaller and smarter and the software became huge and complex. The complexity in
OS coupled with proliferation of platforms and comptuer applications created a myriad of products for the same 
application domain resulting in tremendous waste and rapid obsolescence. It would be nice to have a single
email application that can run on a variety of computing devices such as a Mainframe, Desktop, Laptop, PDA, Cell phone, 
or any other network device! We would be spending time and energy in enhancing and improving such applications 
instead of writing, re-writing, porting, and re-porting the same application many times over. 
This simple example illustrates the need for a computing paradigm that is independent of a computing platform or 
environments. 
We propose a Bare Machine Computing (BMC) paradigm that accomplishes the above objectives. When OS or any 
centralized controller is avoided, then a computer application directly communicates to hardware that is 
bare and does not have any valuable resources. Such computer application is referred to as an application object (AO).
The AO runs on a bare machine which consists of a CPU, Memory, and I/O devices. When OS layer is tumbled then the 
computing platform becomes flat and it has only two entities: hardware and software (AO). 
When hardware architecture (e.g. X86) is made standard, then any AO can communicate to this hardware 
thus making the AO stable over a long period of time. This will reduce the speed of obsolescence and impede the 
rapid changes in computer applications. It will also polarize the computing application-centric 
instead of being susceptable to ever changing computing environments. 
Our research focuses on explorations of the BMC paradigm by studying complex computer applications that run 
on a bare machine. We have made tremendous progress in developing reasonably complex systems such as 
Web server, Email server, Webmail server, VoIP soft-phone, TLS, IP-Sec, and so on. This work demonstrates 
that the BMC applications are much simpler, smaller in code size, achieve an order of improvement 
in performance over their conventional OS-based systems, and they seem inherently secure. 
<p class="MsoNormal" style="text-align:justify">&nbsp;</p>
<p class="MsoNormal" style="text-align:justify">
<font face="Arial" size="3" color="#800080">&nbsp;&nbsp;&nbsp; 
When the BMC becomes a reality, it changes the information technology world in 
many ways. The hardware vendors have to extend their hardware interfaces rather 
than discard and rebuild them. The software vendors will be transformed into AO 
builders and they will be polarized on computer applications rather than 
computing environments. The AO builders also have to extend their AOs instead of 
discard and rebuild them. There will be universal AOs that will serve all users 
in the world as a single source for global objects. The Internet service 
providers can manage and distribute AOs and charge fee as a single source of 
service for users. When AOs become global objects, one can build pervasive AOs 
using the same API for hardware and the same processor architecture in pervasive 
devices. As the focus will turn into building AOs, thus eventually all necessary 
AOs will be captured constituting global objects to do global computing. As the 
AOs are stable over a long period of time, or for ever, there is no need to dump 
hardware and software frequently, thus saving tremendous product cost, dumping 
cost, time for retraining, and preserving people's skills. That is, the BMC 
paradigm will help reduce speed of obsolescence and result in a revolutionary 
paradigm for the future computing. </font></p>
<p class="MsoNormal" style="text-align:justify">
&nbsp;</p>
<p class="MsoNormal" style="text-align:justify">
<font face="Arial" color="#800080">&nbsp;&nbsp;&nbsp;&nbsp; <u>The simplest view 
of BMC can be postulated as follows. You can carry on your own AO in a 
flash drive and run on any bare machine available anywhere in the world, which 
is connected to the Internet</u>.&nbsp; In such computing environment, the 
hardware has no protected resources and readily available everywhere and the AOs 
are owned by people and can be leased from AO vendors, who can customize them 
for individual needs.&nbsp; The bare machine vendors should keep their 
interfaces fairly stable and extend their interfaces as needed for enhanced AOs.&nbsp; 
Similarly, the AO vendors should also extend their AOs resulting in new AOs 
while preserving the old AOs.&nbsp; The technology evolution will now focus on 
development of new and enhanced applications instead of new and unstable 
environments. The incredible impact of this approach will span across many 
dimensions including: less disposal of hardware and software, preserve people 
skills, reduce capital investments, and encourage object-oriented philosophy in 
every aspect of computing development.&nbsp;&nbsp; </font></p>
<p class="MsoNormal" style="text-align:justify">
<font face="Arial" color="#800080">&nbsp;</font></p>
<p class="MsoNormal" style="text-align:justify">&nbsp;</p>
<p class="MsoNormal" style="text-align:justify"><font face="Verdana" size="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<a href="../index.htm">Return</a></font></p>
<p class="MsoNormal"><font face="Verdana" size="2">&nbsp;</font></p>

</body>

</html>
